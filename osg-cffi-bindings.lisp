;;; Generated by Verrazano 0.5
;;; WARNING: This is a generated file, editing it is unwise!


(cl:in-package :cl-user)

(cl:defpackage :osg-cffi-bindings
  (:use :cffi)
  (:nicknames)
  (:export "VEC-3-ARRAY-DATA-OPERATOR-="
           "TEMPLATE-ARRAY-<OSG-::-VEC-3F-,-VEC-3-ARRAY-TYPE-,3,5126>"
           "VEC-3-ARRAY"
           "VEC-3-ARRAY-DATA-NEW"
           "VEC-3-ARRAY-DATA-CONSTRUCTOR"
           "COMPUTE-BOUNDING-SPHERE-CALLBACK-NEW"
           "COMPUTE-BOUNDING-SPHERE-CALLBACK-CONSTRUCTOR"
           "SUBLOAD"
           "LOAD"
           "SUBLOAD-CALLBACK-NEW"
           "SUBLOAD-CALLBACK-CONSTRUCTOR"
           "SUBLOAD-CALLBACK-OPERATOR-="
           "ARRAY-DATA-OPERATOR-="
           "ARRAY-DATA-NEW"
           "ARRAY-DATA-CONSTRUCTOR"
           "VEC-4S-OPERATOR-"
           "VEC-4S-OPERATOR-+="
           "VEC-4S-OPERATOR-+"
           "VEC-4S-OPERATOR-/="
           "VEC-4S-OPERATOR-/"
           "VEC-4S-OPERATOR-*="
           "VEC-4S-OPERATOR-*"
           "VEC-4S-OPERATOR-[]"
           "VEC-4S-OPERATOR-!="
           "VEC-4S-OPERATOR-=="
           "VEC-4S-NEW"
           "VEC-4S-CONSTRUCTOR"
           "VEC-4S-OPERATOR-="
           ".-16"
           "VEC-4D-OPERATOR-"
           "VEC-4D-OPERATOR-+="
           "VEC-4D-OPERATOR-+"
           "VEC-4D-OPERATOR-/="
           "VEC-4D-OPERATOR-/"
           "VEC-4D-OPERATOR-*="
           "VEC-4D-OPERATOR-*"
           "VEC-4D-OPERATOR-[]"
           "VEC-4D-OPERATOR-!="
           "VEC-4D-OPERATOR-=="
           "VEC-4D-NEW"
           "VEC-4D-CONSTRUCTOR"
           "VEC-4D-OPERATOR-="
           ".-15"
           "VEC-4B-OPERATOR-"
           "VEC-4B-OPERATOR-+="
           "VEC-4B-OPERATOR-+"
           "VEC-4B-OPERATOR-/="
           "VEC-4B-OPERATOR-/"
           "VEC-4B-OPERATOR-*="
           "VEC-4B-OPERATOR-*"
           "VEC-4B-OPERATOR-[]"
           "VEC-4B-OPERATOR-!="
           "VEC-4B-OPERATOR-=="
           "VEC-4B-NEW"
           "VEC-4B-CONSTRUCTOR"
           "VEC-4B-OPERATOR-="
           ".-14"
           "VEC-3S-OPERATOR-"
           "VEC-3S-OPERATOR-+="
           "VEC-3S-OPERATOR-+"
           "VEC-3S-OPERATOR-/="
           "VEC-3S-OPERATOR-/"
           "VEC-3S-OPERATOR-*="
           "VEC-3S-OPERATOR-*"
           "VEC-3S-OPERATOR-[]"
           "VEC-3S-OPERATOR-!="
           "VEC-3S-OPERATOR-=="
           "VEC-3S-NEW"
           "VEC-3S-CONSTRUCTOR"
           "VEC-3S-OPERATOR-="
           ".-12"
           "VEC-3D-OPERATOR-"
           "VEC-3D-OPERATOR-+="
           "VEC-3D-OPERATOR-+"
           "VEC-3D-OPERATOR-/="
           "VEC-3D-OPERATOR-/"
           "VEC-3D-OPERATOR-*="
           "VEC-3D-OPERATOR-^"
           "VEC-3D-OPERATOR-*"
           "VEC-3D-OPERATOR-[]"
           "VEC-3D-OPERATOR-!="
           "VEC-3D-OPERATOR-=="
           "VEC-3D-NEW"
           "VEC-3D-CONSTRUCTOR"
           "VEC-3D-OPERATOR-="
           ".-11"
           "VEC-3B-OPERATOR-"
           "VEC-3B-OPERATOR-+="
           "VEC-3B-OPERATOR-+"
           "VEC-3B-OPERATOR-/="
           "VEC-3B-OPERATOR-/"
           "VEC-3B-OPERATOR-*="
           "VEC-3B-OPERATOR-*"
           "VEC-3B-OPERATOR-[]"
           "VEC-3B-OPERATOR-!="
           "VEC-3B-OPERATOR-=="
           "VEC-3B-NEW"
           "VEC-3B-CONSTRUCTOR"
           "VEC-3B-OPERATOR-="
           ".-10"
           "VEC-2S-OPERATOR-"
           "VEC-2S-OPERATOR-+="
           "VEC-2S-OPERATOR-+"
           "VEC-2S-OPERATOR-/="
           "VEC-2S-OPERATOR-/"
           "VEC-2S-OPERATOR-*="
           "VEC-2S-OPERATOR-*"
           "VEC-2S-OPERATOR-[]"
           "VEC-2S-OPERATOR-!="
           "VEC-2S-OPERATOR-=="
           "VEC-2S-NEW"
           "VEC-2S-CONSTRUCTOR"
           "VEC-2S-OPERATOR-="
           ".-8"
           "VEC-2D-OPERATOR-"
           "VEC-2D-OPERATOR-+="
           "VEC-2D-OPERATOR-+"
           "VEC-2D-OPERATOR-/="
           "VEC-2D-OPERATOR-/"
           "VEC-2D-OPERATOR-*="
           "VEC-2D-OPERATOR-*"
           "VEC-2D-OPERATOR-[]"
           "VEC-2D-OPERATOR-!="
           "VEC-2D-OPERATOR-=="
           "VEC-2D-NEW"
           "VEC-2D-CONSTRUCTOR"
           "VEC-2D-OPERATOR-="
           ".-7"
           "VEC-2B-OPERATOR-"
           "VEC-2B-OPERATOR-+="
           "VEC-2B-OPERATOR-+"
           "VEC-2B-OPERATOR-/="
           "VEC-2B-OPERATOR-/"
           "VEC-2B-OPERATOR-*="
           "VEC-2B-OPERATOR-*"
           "VEC-2B-OPERATOR-[]"
           "VEC-2B-OPERATOR-!="
           "VEC-2B-OPERATOR-=="
           "VEC-2B-NEW"
           "VEC-2B-CONSTRUCTOR"
           "VEC-2B-OPERATOR-="
           ".-6"
           "VEC-4UB-OPERATOR-"
           "VEC-4UB-OPERATOR-+="
           "VEC-4UB-OPERATOR-+"
           "VEC-4UB-OPERATOR-/="
           "VEC-4UB-OPERATOR-/"
           "VEC-4UB-OPERATOR-*="
           "VEC-4UB-OPERATOR-*"
           "VEC-4UB-OPERATOR-[]"
           "VEC-4UB-OPERATOR-!="
           "VEC-4UB-OPERATOR-=="
           "VEC-4UB-NEW"
           "VEC-4UB-CONSTRUCTOR"
           "VEC-4UB-OPERATOR-="
           ".-17"
           "COMPUTE-WORLD-TO-LOCAL-MATRIX"
           "COMPUTE-LOCAL-TO-WORLD-MATRIX"
           "GET-PIVOT-POINT"
           "SET-PIVOT-POINT"
           "GET-SCALE"
           "SET-SCALE"
           "GET-ATTITUDE"
           "SET-ATTITUDE"
           "GET-POSITION"
           "SET-POSITION"
           "AS-POSITION-ATTITUDE-TRANSFORM"
           "POSITION-ATTITUDE-TRANSFORM-NEW"
           "POSITION-ATTITUDE-TRANSFORM-CONSTRUCTOR"
           "ALLOCATE-MIPMAP"
           "COMPUTE-INTERNAL-FORMAT"
           "APPLY"
           "COPY-TEX-SUB-IMAGE-2D"
           "COPY-TEX-IMAGE-2D"
           "GET-NUM-MIPMAP-LEVELS"
           "SET-NUM-MIPMAP-LEVELS"
           "GET-SUBLOAD-CALLBACK"
           "SET-SUBLOAD-CALLBACK"
           "GET-TEXTURE-DEPTH"
           "GET-TEXTURE-HEIGHT"
           "GET-TEXTURE-WIDTH"
           "SET-TEXTURE-HEIGHT"
           "SET-TEXTURE-WIDTH"
           "SET-TEXTURE-SIZE"
           "GET-NUM-IMAGES"
           "GET-MODIFIED-COUNT"
           "GET-IMAGE"
           "SET-IMAGE"
           "GET-TEXTURE-TARGET"
           "COMPARE"
           "REF-PTR-<OSG-::-STATE-ATTRIBUTE-::-CALLBACK->"
           "VECTOR-<OSG-::-STATE-SET-*,STD-::ALLOCATOR-<OSG-::-STATE-SET-*> >"
           "STATE-ATTRIBUTE"
           "GET-TYPE"
           "OSGNVPARSE-PROGRAM-PARSER"
           "OSGNVSLANG-PROGRAM"
           "OSGNVCG-PROGRAM"
           "OSGNVEXT-REGISTER-COMBINERS"
           "OSGNVEXT-VERTEX-PROGRAM"
           "OSGNVEXT-TEXTURE-SHADER"
           "OSGNV-PARAMETER-BLOCK"
           "VIEWMATRIXEXTRACTOR"
           "VALIDATOR"
           "HINT"
           "CLAMPCOLOR"
           "POINTSPRITE"
           "FRAGMENTPROGRAM"
           "VERTEXPROGRAM"
           "COLORMATRIX"
           "CLIPPLANE"
           "MULTISAMPLE"
           "BLENDCOLOR"
           "SCISSOR"
           "VIEWPORT"
           "DEPTH"
           "COLORMASK"
           "STENCIL"
           "LOGICOP"
           "BLENDEQUATION"
           "BLENDFUNC"
           "LIGHTMODEL"
           "TEXMAT"
           "TEXGEN"
           "TEXENVFILTER"
           "TEXENV"
           "SHADEMODEL"
           "POLYGONSTIPPLE"
           "LINESTIPPLE"
           "LINEWIDTH"
           "POINT"
           "LIGHT"
           "FRONTFACE"
           "FOG"
           "CULLFACE"
           "COLORTABLE"
           "ANTIALIAS"
           "ALPHAFUNC"
           "MATERIAL"
           "POLYGONOFFSET"
           "POLYGONMODE"
           "TEXTURE"
           "REF-PTR-<OSG-::-PIXEL-BUFFER-OBJECT->"
           "VECTOR-<UNSIGNED- INT-,STD-::ALLOCATOR-<UNSIGNED- INT-> >"
           "IMAGE"
           "USE-MALLOC-FREE"
           "USE-NEW-DELETE"
           "NO-DELETE"
           "ALLOCATION-MODE"
           "TOP-LEFT"
           "BOTTOM-LEFT"
           "ORIGIN"
           "EXTERNAL-FILE"
           "STORE-INLINE"
           "NO-PREFERENCE"
           "WRITE-HINT"
           "TEXTURE-2D-NEW"
           "TEXTURE-2D-CONSTRUCTOR"
           "IMAGE-MODIFIED-COUNT"
           "VEC-4F-OPERATOR-"
           "VEC-4F-OPERATOR-+="
           "VEC-4F-OPERATOR-+"
           "VEC-4F-OPERATOR-/="
           "VEC-4F-OPERATOR-/"
           "VEC-4F-OPERATOR-*="
           "VEC-4F-OPERATOR-*"
           "AS-RGBA"
           "AS-ABGR"
           "A"
           "B"
           "G"
           "R"
           "W"
           "VEC-4F-OPERATOR-[]"
           "VEC-4F-OPERATOR-!="
           "VEC-4F-OPERATOR-=="
           "VEC-4F-NEW"
           "VEC-4F-CONSTRUCTOR"
           "VEC-4F-OPERATOR-="
           ".-13"
           "VEC-2F-OPERATOR-"
           "VEC-2F-OPERATOR-+="
           "VEC-2F-OPERATOR-+"
           "VEC-2F-OPERATOR-/="
           "VEC-2F-OPERATOR-/"
           "VEC-2F-OPERATOR-*="
           "VEC-2F-OPERATOR-*"
           "VEC-2F-OPERATOR-[]"
           "VEC-2F-OPERATOR-!="
           "VEC-2F-OPERATOR-=="
           "VEC-2F-NEW"
           "VEC-2F-CONSTRUCTOR"
           "VEC-2F-OPERATOR-="
           ".-5"
           "CHILD-INSERTED"
           "CHILD-REMOVED"
           "GET-CHILD-INDEX"
           "CONTAINS-NODE"
           "GET-CHILD"
           "SET-CHILD"
           "GET-NUM-CHILDREN"
           "REPLACE-CHILD"
           "REMOVE-CHILDREN"
           "REMOVE-CHILD"
           "INSERT-CHILD"
           "ADD-CHILD"
           "GROUP-NEW"
           "GROUP-CONSTRUCTOR"
           "SET-NUM-CHILDREN-WITH-OCCLUDER-NODES"
           "SET-NUM-CHILDREN-WITH-CULLING-DISABLED"
           "SET-NUM-CHILDREN-REQUIRING-EVENT-TRAVERSAL"
           "SET-NUM-CHILDREN-REQUIRING-UPDATE-TRAVERSAL"
           "REMOVE-PARENT"
           "ADD-PARENT"
           "GET-COMPUTE-BOUNDING-SPHERE-CALLBACK"
           "SET-COMPUTE-BOUNDING-SPHERE-CALLBACK"
           "GET-BOUND"
           "DIRTY-BOUND"
           "GET-INITIAL-BOUND"
           "SET-INITIAL-BOUND"
           "GET-STATE-SET"
           "GET-OR-CREATE-STATE-SET"
           "SET-STATE-SET"
           "REF-PTR-<OSG-::-STATE-SET-::-CALLBACK->"
           "MAP-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >,STD-::PAIR-<OSG-::REF-PTR-<OSG-::-UNIFORM->, UNSIGNED- INT->,STD-::LESS-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> > >,STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >, STD-::PAIR-<OSG-::REF-PTR-<OSG-::-UNIFORM->, UNSIGNED- INT-> > > >"
           "VECTOR-<STD-::MAP-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, STD-::PAIR-<OSG-::REF-PTR-<OSG-::-STATE-ATTRIBUTE->, UNSIGNED- INT->, STD-::LESS-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT-> >, STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, STD-::PAIR-<OSG-::REF-PTR-<OSG-::-STATE-ATTRIBUTE->, UNSIGNED- INT-> > > >,STD-::ALLOCATOR-<STD-::MAP-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, STD-::PAIR-<OSG-::REF-PTR-<OSG-::-STATE-ATTRIBUTE->, UNSIGNED- INT->, STD-::LESS-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT-> >, STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, STD-::PAIR-<OSG-::REF-PTR-<OSG-::-STATE-ATTRIBUTE->, UNSIGNED- INT-> > > > > >"
           "VECTOR-<STD-::MAP-<UNSIGNED- INT-, UNSIGNED- INT-, STD-::LESS-<UNSIGNED- INT->, STD-::ALLOCATOR-<STD-::PAIR-<CONST- UNSIGNED- INT-, UNSIGNED- INT-> > >,STD-::ALLOCATOR-<STD-::MAP-<UNSIGNED- INT-, UNSIGNED- INT-, STD-::LESS-<UNSIGNED- INT->, STD-::ALLOCATOR-<STD-::PAIR-<CONST- UNSIGNED- INT-, UNSIGNED- INT-> > > > >"
           "MAP-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->,STD-::PAIR-<OSG-::REF-PTR-<OSG-::-STATE-ATTRIBUTE->, UNSIGNED- INT->,STD-::LESS-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT-> >,STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, STD-::PAIR-<OSG-::REF-PTR-<OSG-::-STATE-ATTRIBUTE->, UNSIGNED- INT-> > > >"
           "MAP-<UNSIGNED- INT-,UNSIGNED- INT-,STD-::LESS-<UNSIGNED- INT->,STD-::ALLOCATOR-<STD-::PAIR-<CONST- UNSIGNED- INT-, UNSIGNED- INT-> > >"
           "VECTOR-<OSG-::-OBJECT-*,STD-::ALLOCATOR-<OSG-::-OBJECT-*> >"
           "STATE-SET"
           "OVERRIDE-RENDERBIN-DETAILS"
           "USE-RENDERBIN-DETAILS"
           "INHERIT-RENDERBIN-DETAILS"
           "RENDER-BIN-MODE"
           "ADD-DESCRIPTION"
           "GET-NUM-DESCRIPTIONS"
           "GET-DESCRIPTION"
           "GET-DESCRIPTIONS"
           "SET-DESCRIPTIONS"
           "GET-NODE-MASK"
           "SET-NODE-MASK"
           "CONTAINS-OCCLUDER-NODES"
           "GET-NUM-CHILDREN-WITH-OCCLUDER-NODES"
           "IS-CULLING-ACTIVE"
           "GET-NUM-CHILDREN-WITH-CULLING-DISABLED"
           "GET-CULLING-ACTIVE"
           "SET-CULLING-ACTIVE"
           "REMOVE-CULL-CALLBACK"
           "ADD-CULL-CALLBACK"
           "GET-CULL-CALLBACK"
           "SET-CULL-CALLBACK"
           "GET-NUM-CHILDREN-REQUIRING-EVENT-TRAVERSAL"
           "REMOVE-EVENT-CALLBACK"
           "ADD-EVENT-CALLBACK"
           "GET-EVENT-CALLBACK"
           "SET-EVENT-CALLBACK"
           "GET-NUM-CHILDREN-REQUIRING-UPDATE-TRAVERSAL"
           "REMOVE-UPDATE-CALLBACK"
           "ADD-UPDATE-CALLBACK"
           "GET-UPDATE-CALLBACK"
           "SET-UPDATE-CALLBACK"
           "NODE-CALLBACK"
           "GET-WORLD-MATRICES"
           "GET-PARENTAL-NODE-PATHS"
           "GET-NUM-PARENTS"
           "GET-PARENT"
           "GET-PARENTS"
           "TRAVERSE"
           "ASCEND"
           "AS-SWITCH"
           "AS-TRANSFORM"
           "TRANSFORM"
           "ABSOLUTE-RF-INHERIT-VIEWPOINT"
           "ABSOLUTE-RF"
           "RELATIVE-RF"
           "REFERENCE-FRAME"
           "AS-GROUP"
           "NODE-NEW"
           "NODE-CONSTRUCTOR"
           "DESCRIPTION-LIST"
           "NODE-MASK"
           "PARENT-LIST"
           "LENGTH-2"
           "LENGTH"
           "VEC-3F-OPERATOR-"
           "VEC-3F-OPERATOR-+="
           "VEC-3F-OPERATOR-+"
           "VEC-3F-OPERATOR-/="
           "VEC-3F-OPERATOR-/"
           "VEC-3F-OPERATOR-*="
           "VEC-3F-OPERATOR-^"
           "VEC-3F-OPERATOR-*"
           "IS-NA-N"
           "VALID"
           "Z"
           "Y"
           "X"
           "VEC-3F-OPERATOR-[]"
           "SET"
           "PTR"
           "VEC-3F-OPERATOR-!="
           "VEC-3F-OPERATOR-=="
           "VEC-3F-NEW"
           "VEC-3F-CONSTRUCTOR"
           "VEC-3F-OPERATOR-="
           "NUM-COMPONENTS"
           ".-9"
           "VALUE-TYPE"
           "SET-THREAD-SAFE-REF-UNREF"
           "COMPUTE-BOUND"
           "GET-BOUNDING-BOX"
           "COMPILE-DRAWABLES"
           "GET-DRAWABLE-LIST"
           "GET-DRAWABLE-INDEX"
           "CONTAINS-DRAWABLE"
           "GET-DRAWABLE"
           "GET-NUM-DRAWABLES"
           "SET-DRAWABLE"
           "REPLACE-DRAWABLE"
           "REMOVE-DRAWABLES"
           "REMOVE-DRAWABLE"
           "ADD-DRAWABLE"
           "REF-PTR-<OSG-::-DRAWABLE-::-DRAW-CALLBACK->"
           "REF-PTR-<OSG-::-DRAWABLE-::-CULL-CALLBACK->"
           "REF-PTR-<OSG-::-DRAWABLE-::-EVENT-CALLBACK->"
           "REF-PTR-<OSG-::-DRAWABLE-::-UPDATE-CALLBACK->"
           "REF-PTR-<OSG-::-SHAPE->"
           "REF-PTR-<OSG-::-DRAWABLE-::-COMPUTE-BOUNDING-BOX-CALLBACK->"
           "DRAWABLE"
           "AS-GEODE"
           "REF-PTR-<OSG-::-NODE-VISITOR-::-IMAGE-REQUEST-HANDLER->"
           "REF-PTR-<OSG-::-NODE-VISITOR-::-DATABASE-REQUEST-HANDLER->"
           "TRAVERSE-ACTIVE-CHILDREN"
           "TRAVERSE-ALL-CHILDREN"
           "TRAVERSE-PARENTS"
           "TRAVERSE-NONE"
           "TRAVERSAL-MODE"
           "CULL-VISITOR"
           "COLLECT-OCCLUDER-VISITOR"
           "EVENT-VISITOR"
           "UPDATE-VISITOR"
           "NODE-VISITOR"
           "VISITOR-TYPE"
           "GEODE-NEW"
           "GEODE-CONSTRUCTOR"
           "DRAWABLE-LIST"
           "ADD-ELEMENT-BUFFER-OBJECT-IF-REQUIRED"
           "ADD-VERTEX-BUFFER-OBJECT-IF-REQUIRED"
           "GEOMETRY-OPERATOR-="
           "PRIMITIVE-INDEX-FUNCTOR"
           "PRIMITIVE-FUNCTOR"
           "CONST-ATTRIBUTE-FUNCTOR"
           "ACCEPT"
           "SUPPORTS"
           "ATTRIBUTE-FUNCTOR"
           "DRAW-IMPLEMENTATION"
           "VECTOR-<OSG-::-CAMERA-*,STD-::ALLOCATOR-<OSG-::-CAMERA-*> >"
           "OBSERVER-PTR-<OSG-::-VIEW->"
           "RENDER-INFO"
           "GET-GL-OBJECT-SIZE-HINT"
           "GET-INTERNAL-OPTIMIZED-GEOMETRY"
           "SET-INTERNAL-OPTIMIZED-GEOMETRY"
           "REMOVE-INTERNAL-OPTIMIZED-GEOMETRY"
           "COMPUTE-INTERNAL-OPTIMIZED-GEOMETRY"
           "DUPLICATE-SHARED-ARRAYS"
           "CONTAINS-SHARED-ARRAYS"
           "COPY-TO-AND-OPTIMIZE"
           "SUITABLE-FOR-OPTIMIZATION"
           "COMPUTE-CORRECT-BINDINGS-AND-ARRAY-SIZES"
           "VERIFY-BINDINGS"
           "COMPUTE-FAST-PATHS-USED"
           "ARE-FAST-PATHS-USED"
           "GET-FAST-PATH-HINT"
           "SET-FAST-PATH-HINT"
           "GET-OR-CREATE-ELEMENT-BUFFER-OBJECT"
           "GET-OR-CREATE-VERTEX-BUFFER-OBJECT"
           "GET-DRAW-ELEMENTS-LIST"
           "GET-ARRAY-LIST"
           "RELEASE-GL-OBJECTS"
           "REF-PTR-<OSG-::-STATE-::-DYNAMIC-OBJECT-RENDERING-COMPLETED-CALLBACK->"
           "VECTOR-<OSG-::-STATE-::-ENABLED-ARRAY-PAIR-,STD-::ALLOCATOR-<OSG-::-STATE-::-ENABLED-ARRAY-PAIR-> >"
           "VECTOR-<CONST- OSG-::-STATE-SET-*,STD-::ALLOCATOR-<CONST- OSG-::-STATE-SET-*> >"
           "SET-<CONST- OSG-::-PROGRAM-::-PER-CONTEXT-PROGRAM-*,STD-::LESS-<CONST- OSG-::-PROGRAM-::-PER-CONTEXT-PROGRAM-*>,STD-::ALLOCATOR-<CONST- OSG-::-PROGRAM-::-PER-CONTEXT-PROGRAM-*> >"
           "VECTOR-<STD-::MAP-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, OSG-::-STATE-::-ATTRIBUTE-STACK-, STD-::LESS-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT-> >, STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, OSG-::-STATE-::-ATTRIBUTE-STACK-> > >,STD-::ALLOCATOR-<STD-::MAP-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, OSG-::-STATE-::-ATTRIBUTE-STACK-, STD-::LESS-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT-> >, STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, OSG-::-STATE-::-ATTRIBUTE-STACK-> > > > >"
           "VECTOR-<STD-::MAP-<UNSIGNED- INT-, OSG-::-STATE-::-MODE-STACK-, STD-::LESS-<UNSIGNED- INT->, STD-::ALLOCATOR-<STD-::PAIR-<CONST- UNSIGNED- INT-, OSG-::-STATE-::-MODE-STACK-> > >,STD-::ALLOCATOR-<STD-::MAP-<UNSIGNED- INT-, OSG-::-STATE-::-MODE-STACK-, STD-::LESS-<UNSIGNED- INT->, STD-::ALLOCATOR-<STD-::PAIR-<CONST- UNSIGNED- INT-, OSG-::-STATE-::-MODE-STACK-> > > > >"
           "MAP-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >,OSG-::-STATE-::-UNIFORM-STACK-,STD-::LESS-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> > >,STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >, OSG-::-STATE-::-UNIFORM-STACK-> > >"
           "MAP-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->,OSG-::-STATE-::-ATTRIBUTE-STACK-,STD-::LESS-<STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT-> >,STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::PAIR-<OSG-::-STATE-ATTRIBUTE-::-TYPE-, UNSIGNED- INT->, OSG-::-STATE-::-ATTRIBUTE-STACK-> > >"
           "MAP-<UNSIGNED- INT-,OSG-::-STATE-::-MODE-STACK-,STD-::LESS-<UNSIGNED- INT->,STD-::ALLOCATOR-<STD-::PAIR-<CONST- UNSIGNED- INT-, OSG-::-STATE-::-MODE-STACK-> > >"
           "REF-PTR-<OSG-::-DISPLAY-SETTINGS->"
           "REF-PTR-<CONST- OSG-::-REF-MATRIXD->"
           "REF-PTR-<OSG-::-FRAME-STAMP->"
           "STATE"
           "PAIR-<OSG-::-BUFFER-OBJECT-::-BUFFER-ENTRY-,OSG-::-IMAGE-*>"
           "PIXEL-BUFFER-OBJECT"
           "VECTOR-<STD-::PAIR-<OSG-::-BUFFER-OBJECT-::-BUFFER-ENTRY-, OSG-::-DRAW-ELEMENTS-*>,STD-::ALLOCATOR-<STD-::PAIR-<OSG-::-BUFFER-OBJECT-::-BUFFER-ENTRY-, OSG-::-DRAW-ELEMENTS-*> > >"
           "ELEMENT-BUFFER-OBJECT"
           "VECTOR-<STD-::PAIR-<OSG-::-BUFFER-OBJECT-::-BUFFER-ENTRY-, OSG-::-ARRAY-*>,STD-::ALLOCATOR-<STD-::PAIR-<OSG-::-BUFFER-OBJECT-::-BUFFER-ENTRY-, OSG-::-ARRAY-*> > >"
           "VERTEX-BUFFER-OBJECT"
           "ENABLED-ARRAY-PAIR"
           "VECTOR-<STD-::PAIR-<OSG-::REF-PTR-<CONST- OSG-::-UNIFORM->, UNSIGNED- INT->,STD-::ALLOCATOR-<STD-::PAIR-<OSG-::REF-PTR-<CONST- OSG-::-UNIFORM->, UNSIGNED- INT-> > >"
           "MAP-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >,OSG-::-PROGRAM-::-ACTIVE-VAR-INFO-,STD-::LESS-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> > >,STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >, OSG-::-PROGRAM-::-ACTIVE-VAR-INFO-> > >" 
           "REF-PTR-<OSG-::GL-2-EXTENSIONS->"
           "PER-CONTEXT-PROGRAM"
           "G-LUINT"
           "VECTOR-<OSG-::REF-PTR-<OSG-::-SHADER->,STD-::ALLOCATOR-<OSG-::REF-PTR-<OSG-::-SHADER-> > >"
           "MAP-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >,UNSIGNED- INT-,STD-::LESS-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> > >,STD-::ALLOCATOR-<STD-::PAIR-<CONST- STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >, UNSIGNED- INT-> > >"
           "BUFFERED-VALUE-<OSG-::REF-PTR-<OSG-::-PROGRAM-::-PER-CONTEXT-PROGRAM-> >"
           "PROGRAM"
           "ONCE-PER-ATTRIBUTE"
           "ONCE-PER-FRAME"
           "NEVER-CHECK-GL-ERRORS"
           "CHECK-FOR-GL-ERRORS"
           "MATRIX"
           "MATRIXD"
           "REF-PTR-<OSG-::-GRAPHICS-CONTEXT-::-RESIZED-CALLBACK->"
           "REF-PTR-<OSG-::-GRAPHICS-THREAD->"
           "REF-PTR-<OSG-::-OPERATION->"
           "LIST-<OSG-::REF-PTR-<OSG-::-OPERATION->,STD-::ALLOCATOR-<OSG-::REF-PTR-<OSG-::-OPERATION-> > >"
           "REF-PTR-<OSG-::-REF-BLOCK->"
           "REF-PTR-<OSG-::-STATE->"
           "REF-PTR-<OSG-::-GRAPHICS-CONTEXT-::-TRAITS->"
           "LIST-<OSG-::-CAMERA-*,STD-::ALLOCATOR-<OSG-::-CAMERA-*> >"
           "GRAPHICS-CONTEXT"
           "MUTEX"
           "THREAD"
           "G-LBITFIELD"
           "RESIZE-GL-OBJECT-BUFFERS"
           "DIRTY-DISPLAY-LIST"
           "SET-USE-VERTEX-BUFFER-OBJECTS"
           "GET-VERTEX-ATTRIB-INDICES"
           "SET-VERTEX-ATTRIB-INDICES"
           "GET-TEX-COORD-INDICES"
           "SET-TEX-COORD-INDICES"
           "GET-FOG-COORD-INDICES"
           "SET-FOG-COORD-INDICES"
           "GET-SECONDARY-COLOR-INDICES"
           "SET-SECONDARY-COLOR-INDICES"
           "GET-COLOR-INDICES"
           "SET-COLOR-INDICES"
           "GET-NORMAL-INDICES"
           "SET-NORMAL-INDICES"
           "GET-VERTEX-INDICES"
           "SET-VERTEX-INDICES"
           "INDEX-ARRAY"
           "GET-PRIMITIVE-SET-INDEX"
           "REMOVE-PRIMITIVE-SET"
           "INSERT-PRIMITIVE-SET"
           "SET-PRIMITIVE-SET"
           "ADD-PRIMITIVE-SET"
           "GET-PRIMITIVE-SET"
           "PRIMITIVE-SET"
           "DRAW-ELEMENTS-U-INT-PRIMITIVE-TYPE"
           "DRAW-ELEMENTS-U-SHORT-PRIMITIVE-TYPE"
           "DRAW-ELEMENTS-U-BYTE-PRIMITIVE-TYPE"
           "DRAW-ARRAY-LENGTHS-PRIMITIVE-TYPE"
           "DRAW-ARRAYS-PRIMITIVE-TYPE"
           "PRIMITIVE-TYPE"
           "GET-NUM-PRIMITIVE-SETS"
           "GET-PRIMITIVE-SET-LIST"
           "SET-PRIMITIVE-SET-LIST"
           "GET-VERTEX-ATTRIB-ARRAY-LIST"
           "GET-NUM-VERTEX-ATTRIB-ARRAYS"
           "GET-VERTEX-ATTRIB-DATA"
           "SET-VERTEX-ATTRIB-DATA"
           "GET-VERTEX-ATTRIB-NORMALIZE"
           "SET-VERTEX-ATTRIB-NORMALIZE"
           "GET-VERTEX-ATTRIB-BINDING"
           "SET-VERTEX-ATTRIB-BINDING"
           "GET-VERTEX-ATTRIB-ARRAY"
           "SET-VERTEX-ATTRIB-ARRAY"
           "GET-TEX-COORD-ARRAY-LIST"
           "GET-NUM-TEX-COORD-ARRAYS"
           "GET-TEX-COORD-DATA"
           "SET-TEX-COORD-DATA"
           "GET-TEX-COORD-ARRAY"
           "SET-TEX-COORD-ARRAY"
           "GET-FOG-COORD-DATA"
           "SET-FOG-COORD-DATA"
           "GET-FOG-COORD-ARRAY"
           "SET-FOG-COORD-ARRAY"
           "GET-FOG-COORD-BINDING"
           "SET-FOG-COORD-BINDING"
           "GET-SECONDARY-COLOR-DATA"
           "SET-SECONDARY-COLOR-DATA"
           "GET-SECONDARY-COLOR-ARRAY"
           "SET-SECONDARY-COLOR-ARRAY"
           "GET-SECONDARY-COLOR-BINDING"
           "SET-SECONDARY-COLOR-BINDING"
           "GET-COLOR-DATA"
           "SET-COLOR-DATA"
           "GET-COLOR-ARRAY"
           "SET-COLOR-ARRAY"
           "GET-COLOR-BINDING"
           "SET-COLOR-BINDING"
           "GET-NORMAL-DATA"
           "SET-NORMAL-DATA"
           "GET-NORMAL-ARRAY"
           "SET-NORMAL-ARRAY"
           "GET-NORMAL-BINDING"
           "SET-NORMAL-BINDING"
           "GET-VERTEX-DATA"
           "SET-VERTEX-DATA"
           "GET-VERTEX-ARRAY"
           "SET-VERTEX-ARRAY"
           "REF-PTR-<OSG-::-VERTEX-BUFFER-OBJECT->"
           "G-LVOID"
           "G-LENUM"
           "G-LINT"
           "VEC-4D-ARRAY-TYPE"
           "VEC-3D-ARRAY-TYPE"
           "VEC-2D-ARRAY-TYPE"
           "DOUBLE-ARRAY-TYPE"
           "VEC-4B-ARRAY-TYPE"
           "VEC-3B-ARRAY-TYPE"
           "VEC-2B-ARRAY-TYPE"
           "VEC-4S-ARRAY-TYPE"
           "VEC-3S-ARRAY-TYPE"
           "VEC-2S-ARRAY-TYPE"
           "VEC-4-ARRAY-TYPE"
           "VEC-3-ARRAY-TYPE"
           "VEC-2-ARRAY-TYPE"
           "FLOAT-ARRAY-TYPE"
           "VEC-4UB-ARRAY-TYPE"
           "U-INT-ARRAY-TYPE"
           "U-SHORT-ARRAY-TYPE"
           "U-BYTE-ARRAY-TYPE"
           "INT-ARRAY-TYPE"
           "SHORT-ARRAY-TYPE"
           "BYTE-ARRAY-TYPE"
           "ARRAY-TYPE"
           "TYPE"
           "EMPTY"
           "AS-GEOMETRY"
           "CLASS-NAME"
           "LIBRARY-NAME"
           "IS-SAME-KIND-AS"
           "CLONE"
           "CLONE-TYPE"
           "REF-PTR-<OSG-::-REFERENCED->"
           "OBJECT"
           "UNSPECIFIED"
           "STATIC"
           "DYNAMIC"
           "DATA-VARIANCE"
           "BASIC-STRING-<CHAR-,STD-::CHAR-TRAITS-<CHAR->,STD-::ALLOCATOR-<CHAR-> >"
           "STRING"
           "COPY-OP"
           "GEOMETRY-NEW"
           "GEOMETRY-CONSTRUCTOR"
           "VECTOR-<OSG-::-DRAW-ELEMENTS-*,STD-::ALLOCATOR-<OSG-::-DRAW-ELEMENTS-*> >"
           "DRAW-ELEMENTS-LIST"
           "VECTOR-<OSG-::-ARRAY-*,STD-::ALLOCATOR-<OSG-::-ARRAY-*> >"
           "ARRAY-LIST"
           "PRIMITIVE-SET-LIST"
           "ARRAY-DATA-LIST"
           "REF-PTR-<OSG-::-TEMPLATE-ARRAY-<OSG-::-VEC-3F-, -VEC-3-ARRAY-TYPE-, 3, 5126> >"
           "VEC-3-ARRAY-DATA"
           "+S-INVALID-ARRAY-DATA+"
           "COMPUTE-BOUNDING-SPHERE-CALLBACK"
           "SUBLOAD-CALLBACK"
           "+Z-AXIS+"
           "VECTOR-<OSG-::-NODE-*,STD-::ALLOCATOR-<OSG-::-NODE-*> >"
           "NODE-PATH"
           "+X-AXIS+"
           "OPERATOR-*"
           "VEC-4S"
           "VEC-4D"
           "VEC-4B"
           "VEC-3S"
           "VEC-3B"
           "VEC-2S"
           "VEC-2D"
           "VEC-2B"
           "VEC-4UB"
           "POSITION-ATTITUDE-TRANSFORM"
           "QUAT"
           "VEC-3D"
           "BUFFERED-VALUE-<UNSIGNED- INT->"
           "REF-PTR-<OSG-::-TEXTURE-2D-::-SUBLOAD-CALLBACK->"
           "REF-PTR-<OSG-::-IMAGE->"
           "TEXTURE-2D"
           "G-LSIZEI"
           "VECTOR-<STD-::VECTOR-<OSG-::-NODE-*, STD-::ALLOCATOR-<OSG-::-NODE-*> >,STD-::ALLOCATOR-<STD-::VECTOR-<OSG-::-NODE-*, STD-::ALLOCATOR-<OSG-::-NODE-*> > > >"
           "NODE-PATH-LIST"
           "VEC-4"
           "VEC-4F"
           "VEC-2"
           "VEC-2F"
           "GROUP"
           "REF-PTR-<OSG-::-STATE-SET->"
           "VECTOR-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> >,STD-::ALLOCATOR-<STD-::BASIC-STRING-<CHAR-, STD-::CHAR-TRAITS-<CHAR->, STD-::ALLOCATOR-<CHAR-> > > >"
           "REF-PTR-<OSG-::-NODE-CALLBACK->"
           "VECTOR-<OSG-::-GROUP-*,STD-::ALLOCATOR-<OSG-::-GROUP-*> >"
           "REF-PTR-<OSG-::-NODE-::-COMPUTE-BOUNDING-SPHERE-CALLBACK->"
           "NODE"
           "BOUNDING-SPHERE"
           "BOUNDING-SPHERE-IMPL-<OSG-::-VEC-3F->"
           "BOUNDING-SPHEREF"
           "+Y-AXIS+"
           "VECTOR-<OSG-::REF-PTR-<OSG-::-NODE->,STD-::ALLOCATOR-<OSG-::REF-PTR-<OSG-::-NODE-> > >"
           "NODE-LIST"
           "SWITCH"
           "VECTOR-<OSG-::REF-PTR-<OSG-::-DRAWABLE->,STD-::ALLOCATOR-<OSG-::REF-PTR-<OSG-::-DRAWABLE-> > >"
           "GEODE"
           "BOUNDING-BOX"
           "BOUNDING-BOX-IMPL-<OSG-::-VEC-3F->"
           "BOUNDING-BOXF"
           "CREATE-TEXTURED-QUAD-GEOMETRY"
           "VEC-3"
           "VEC-3F"
           "REF-PTR-<OSG-::-GEOMETRY->"
           "VECTOR-<OSG-::-GEOMETRY-::-ARRAY-DATA-,STD-::ALLOCATOR-<OSG-::-GEOMETRY-::-ARRAY-DATA-> >"
           "VECTOR-<OSG-::REF-PTR-<OSG-::-PRIMITIVE-SET->,STD-::ALLOCATOR-<OSG-::REF-PTR-<OSG-::-PRIMITIVE-SET-> > >"
           "GEOMETRY"
           "NORMALIZE"
           "BINDING"
           "REF-PTR-<OSG-::-INDEX-ARRAY->"
           "INDICES"
           "REF-PTR-<OSG-::-ARRAY->"
           "ARRAY"
           "ARRAY-DATA"
           "G-LBOOLEAN"
           "BIND-PER-VERTEX"
           "BIND-PER-PRIMITIVE"
           "BIND-PER-PRIMITIVE-SET"
           "BIND-OVERALL"
           "BIND-OFF"
           "ATTRIBUTE-BINDING"
           "VECTOR-<OSG-::-MATRIXD-,STD-::ALLOCATOR-<OSG-::-MATRIXD-> >"
           "MATRIX-LIST"
           "+_ZTIN-3OSG-9-TEXTURE-2D-15-SUBLOAD-CALLBACK-E+"
           "+_ZTIN-3OSG-4-NODE-E+"
           "+_ZTIN-3OSG-4-NODE-29-COMPUTE-BOUNDING-SPHERE-CALLBACK-E+"
           "+_ZTIN-3OSG-9-TEXTURE-2DE+"
           "+_ZTIN-3OSG-5-GEODE-E+"
           "+_ZTIN-3OSG-8-GEOMETRY-E+"
           "+_ZTIN-3OSG-5-GROUP-E+"
           "+_ZTIN-3OSG-25-POSITION-ATTITUDE-TRANSFORM-E+"))

(cl:in-package :osg-cffi-bindings)

(cl:defun vtable-lookup (pobj indx coff)
  (cl:let ((vptr (cffi:mem-ref pobj :pointer coff)))
    (cffi:mem-aref vptr :pointer (cl:- indx 2))))

(cl:defmacro virtual-funcall (pobj indx coff cl:&body body)
  `(cffi:foreign-funcall-pointer (vtable-lookup ,pobj ,indx ,coff) ,cl:nil ,@body))

(cl:defconstant +_ztin-3osg-25-position-attitude-transform-e+ cl:nil)

(cl:defconstant +_ztin-3osg-5-group-e+ cl:nil)

(cl:defconstant +_ztin-3osg-8-geometry-e+ cl:nil)

(cl:defconstant +_ztin-3osg-5-geode-e+ cl:nil)

(cl:defconstant +_ztin-3osg-9-texture-2de+ cl:nil)

(cl:defconstant +_ztin-3osg-4-node-29-compute-bounding-sphere-callback-e+ cl:nil)

(cl:defconstant +_ztin-3osg-4-node-e+ cl:nil)

(cl:defconstant +_ztin-3osg-9-texture-2d-15-subload-callback-e+ cl:nil)

(cffi::defctype matrix-list vector-<osg-::-matrixd-,std-::allocator-<osg-::-matrixd-> >)

(cffi:defcenum attribute-binding
  (:bind-off 0)
  (:bind-overall 1)
  (:bind-per-primitive-set 2)
  (:bind-per-primitive 3)
  (:bind-per-vertex 4))

(cffi::defctype g-lboolean :unsigned-char)

(cffi:defcstruct array-data
  (array ref-ptr-<osg-::-array->)
  (indices ref-ptr-<osg-::-index-array->)
  (binding attribute-binding)
  (normalize g-lboolean))

(cffi:defcstruct geometry
  (_primitives vector-<osg-::ref-ptr-<osg-::-primitive-set->,std-::allocator-<osg-::ref-ptr-<osg-::-primitive-set-> > >)
  (_vertex-data array-data)
  (_normal-data array-data)
  (_color-data array-data)
  (_secondary-color-data array-data)
  (_fog-coord-data array-data)
  (_tex-coord-list vector-<osg-::-geometry-::-array-data-,std-::allocator-<osg-::-geometry-::-array-data-> >)
  (_vertex-attrib-list vector-<osg-::-geometry-::-array-data-,std-::allocator-<osg-::-geometry-::-array-data-> >)
  (_fast-path :char)
  (_fast-path-hint :char)
  (_internal-optimized-geometry ref-ptr-<osg-::-geometry->))

(cffi:defcstruct vec-3f
  (_v :float :count 3))

(cffi::defctype vec-3 vec-3f)

(cffi:defcfun ("_ZN3osg26createTexturedQuadGeometryERKNS_5Vec3fES2_S2_ff" create-textured-quad-geometry) :pointer
                                                                                                                  (corner vec-3)
                                                                                                                  (width-vec vec-3)
                                                                                                                  (height-vec vec-3)
                                                                                                                  (s :float)
                                                                                                                  (t :float))

(cffi:defcfun ("_ZN3osg26createTexturedQuadGeometryERKNS_5Vec3fES2_S2_ffff" create-textured-quad-geometry) :pointer
                                                                                                                    (corner vec-3)
                                                                                                                    (width-vec vec-3)
                                                                                                                    (height-vec vec-3)
                                                                                                                    (l :float)
                                                                                                                    (b :float)
                                                                                                                    (r :float)
                                                                                                                    (t :float))

(cffi::defctype bounding-boxf bounding-box-impl-<osg-::-vec-3f->)

(cffi::defctype bounding-box bounding-boxf)

(cffi:defcstruct geode
  (_bbox bounding-box)
  (_drawables vector-<osg-::ref-ptr-<osg-::-drawable->,std-::allocator-<osg-::ref-ptr-<osg-::-drawable-> > >))

(cffi:defcstruct switch
  )

(cffi::defctype node-list vector-<osg-::ref-ptr-<osg-::-node->,std-::allocator-<osg-::ref-ptr-<osg-::-node-> > >)

(cl:defconstant +y-axis+ cl:nil)

(cffi::defctype bounding-spheref bounding-sphere-impl-<osg-::-vec-3f->)

(cffi::defctype bounding-sphere bounding-spheref)

(cffi:defcstruct node
  (_initial-bound bounding-sphere)
  (_compute-bound-callback ref-ptr-<osg-::-node-::-compute-bounding-sphere-callback->)
  (_bounding-sphere bounding-sphere)
  (_bounding-sphere-computed :char)
  (_parents vector-<osg-::-group-*,std-::allocator-<osg-::-group-*> >)
  (_update-callback ref-ptr-<osg-::-node-callback->)
  (_num-children-requiring-update-traversal :unsigned-int)
  (_event-callback ref-ptr-<osg-::-node-callback->)
  (_num-children-requiring-event-traversal :unsigned-int)
  (_cull-callback ref-ptr-<osg-::-node-callback->)
  (_culling-active :char)
  (_num-children-with-culling-disabled :unsigned-int)
  (_num-children-with-occluder-nodes :unsigned-int)
  (_node-mask :unsigned-int)
  (_descriptions vector-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,std-::allocator-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > > >)
  (_stateset ref-ptr-<osg-::-state-set->))

(cffi:defcstruct group
  (_children node-list))

(cffi:defcstruct vec-2f
  (_v :float :count 2))

(cffi::defctype vec-2 vec-2f)

(cffi:defcstruct vec-4f
  (_v :float :count 4))

(cffi::defctype vec-4 vec-4f)

(cffi::defctype node-path-list vector-<std-::vector-<osg-::-node-*, std-::allocator-<osg-::-node-*> >,std-::allocator-<std-::vector-<osg-::-node-*, std-::allocator-<osg-::-node-*> > > >)

(cffi::defctype g-lsizei :int)

(cffi:defcstruct texture-2d
  (_image ref-ptr-<osg-::-image->)
  (_texture-width g-lsizei)
  (_texture-height g-lsizei)
  (_num-mipmap-levels g-lsizei)
  (_subload-callback ref-ptr-<osg-::-texture-2d-::-subload-callback->)
  (_modified-count buffered-value-<unsigned- int->))

(cffi:defcstruct vec-3d
  (_v :double :count 3))

(cffi:defcstruct quat
  (_v :double :count 4))

(cffi:defcstruct position-attitude-transform
  (_position vec-3d)
  (_attitude quat)
  (_scale vec-3d)
  (_pivot-point vec-3d))

(cffi:defcstruct vec-4ub
  (_v :unsigned-char :count 4))

(cffi:defcstruct vec-2b
  (_v :char :count 2))

(cffi:defcstruct vec-2d
  (_v :double :count 2))

(cffi:defcstruct vec-2s
  (_v :short :count 2))

(cffi:defcstruct vec-3b
  (_v :char :count 3))

(cffi:defcstruct vec-3s
  (_v :short :count 3))

(cffi:defcstruct vec-4b
  (_v :char :count 4))

(cffi:defcstruct vec-4d
  (_v :double :count 4))

(cffi:defcstruct vec-4s
  (_v :short :count 4))

(cffi:defcfun ("_ZN3osgmlERKNS_5Vec4fERKNS_5Vec3dE" operator-*) :double (lhs vec-4f) (rhs vec-3d))

(cffi:defcfun ("_ZN3osgmlERKNS_5Vec4dERKNS_5Vec3fE" operator-*) :double (lhs vec-4d) (rhs vec-3f))

(cffi:defcfun ("_ZN3osgmlERKNS_5Vec4dERKNS_5Vec3dE" operator-*) :double (lhs vec-4d) (rhs vec-3d))

(cffi:defcfun ("_ZN3osgmlERKNS_5Vec3dERKNS_5Vec4fE" operator-*) :double (lhs vec-3d) (rhs vec-4f))

(cffi:defcfun ("_ZN3osgmlERKNS_5Vec3fERKNS_5Vec4dE" operator-*) :double (lhs vec-3f) (rhs vec-4d))

(cffi:defcfun ("_ZN3osgmlERKNS_5Vec3dERKNS_5Vec4dE" operator-*) :double (lhs vec-3d) (rhs vec-4d))

(cffi:defcfun ("_ZN3osgmlERKNS_5Vec4fERKNS_5Vec3fE" operator-*) :float (lhs vec-4f) (rhs vec-3f))

(cffi:defcfun ("_ZN3osgmlERKNS_5Vec3fERKNS_5Vec4fE" operator-*) :float (lhs vec-3f) (rhs vec-4f))

(cl:defconstant +x-axis+ cl:nil)

(cffi::defctype node-path vector-<osg-::-node-*,std-::allocator-<osg-::-node-*> >)

(cl:defconstant +z-axis+ cl:nil)

(cffi:defcstruct subload-callback
  )

(cffi:defcstruct compute-bounding-sphere-callback
  )

(cl:defconstant +s-invalid-array-data+ cl:nil)

(cffi:defcstruct vec-3-array-data
  (array ref-ptr-<osg-::-template-array-<osg-::-vec-3f-, -vec-3-array-type-, 3, 5126> >)
  (indices ref-ptr-<osg-::-index-array->)
  (binding attribute-binding)
  (normalize g-lboolean))

(cffi::defctype array-data-list vector-<osg-::-geometry-::-array-data-,std-::allocator-<osg-::-geometry-::-array-data-> >)

(cffi::defctype primitive-set-list vector-<osg-::ref-ptr-<osg-::-primitive-set->,std-::allocator-<osg-::ref-ptr-<osg-::-primitive-set-> > >)

(cffi::defctype array-list vector-<osg-::-array-*,std-::allocator-<osg-::-array-*> >)

(cffi::defctype draw-elements-list vector-<osg-::-draw-elements-*,std-::allocator-<osg-::-draw-elements-*> >)

(cffi:defcfun ("_ZN3osg8GeometryC1Ev" geometry-constructor) :void (this :pointer))

(cl:defun geometry-new ()
  (cl:let ((instance (cffi:foreign-alloc 'geometry)))
    (geometry-constructor instance)
    instance))

(cffi:defcstruct copy-op
  (_flags :unsigned-int))

(cffi:defcfun ("_ZN3osg8GeometryC1ERKS0_RKNS_6CopyOpE" geometry-constructor) :void (this :pointer)
                                                                                   (geometry geometry)
                                                                                   (copyop copy-op))

(cl:defun geometry-new ()
  (cl:let ((instance (cffi:foreign-alloc 'geometry)))
    (geometry-constructor instance)
    instance))

(cffi::defctype string basic-string-<char-,std-::char-traits-<char->,std-::allocator-<char-> >)

(cffi:defcenum data-variance
  (:dynamic 0)
  (:static 1)
  (:unspecified 2))

(cffi:defcstruct object
  (_name string)
  (_data-variance data-variance)
  (_user-data ref-ptr-<osg-::-referenced->))

(cffi:defcfun ("_ZNK3osg8Geometry9cloneTypeEv" clone-type) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry5cloneERKNS_6CopyOpE" clone) :pointer (this :pointer)
                                                                       (copyop copy-op))

(cffi:defcfun ("_ZNK3osg8Geometry12isSameKindAsEPKNS_6ObjectE" is-same-kind-as) :char (this :pointer)
                                                                                      (obj :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry11libraryNameEv" library-name) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry9classNameEv" class-name) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry10asGeometryEv" as-geometry) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry10asGeometryEv" as-geometry) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry5emptyEv" empty) :char (this :pointer))

(cffi:defcenum type
  (:array-type 0)
  (:byte-array-type 1)
  (:short-array-type 2)
  (:int-array-type 3)
  (:u-byte-array-type 4)
  (:u-short-array-type 5)
  (:u-int-array-type 6)
  (:vec-4ub-array-type 7)
  (:float-array-type 8)
  (:vec-2-array-type 9)
  (:vec-3-array-type 10)
  (:vec-4-array-type 11)
  (:vec-2s-array-type 12)
  (:vec-3s-array-type 13)
  (:vec-4s-array-type 14)
  (:vec-2b-array-type 15)
  (:vec-3b-array-type 16)
  (:vec-4b-array-type 17)
  (:double-array-type 18)
  (:vec-2d-array-type 19)
  (:vec-3d-array-type 20)
  (:vec-4d-array-type 21))

(cffi::defctype g-lint :int)

(cffi::defctype g-lenum :unsigned-int)

(cffi::defctype g-lvoid :void)

(cffi:defcstruct array
  (_array-type type)
  (_data-size g-lint)
  (_data-type g-lenum)
  (_modified-count :unsigned-int)
  (_vbo ref-ptr-<osg-::-vertex-buffer-object->)
  (_vbo-offset :pointer))

(cffi:defcfun ("_ZN3osg8Geometry14setVertexArrayEPNS_5ArrayE" set-vertex-array) :void (this :pointer)
                                                                                      (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry14getVertexArrayEv" get-vertex-array) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry14getVertexArrayEv" get-vertex-array) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry13setVertexDataERKNS0_9ArrayDataE" set-vertex-data) :void (this :pointer)
                                                                                          (array-data array-data))

(cffi:defcfun ("_ZN3osg8Geometry13getVertexDataEv" get-vertex-data) array-data (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry13getVertexDataEv" get-vertex-data) array-data (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry16setNormalBindingENS0_16AttributeBindingE" set-normal-binding) :void (this :pointer)
                                                                                                      (ab attribute-binding))

(cffi:defcfun ("_ZNK3osg8Geometry16getNormalBindingEv" get-normal-binding) attribute-binding (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry14setNormalArrayEPNS_5ArrayE" set-normal-array) :void (this :pointer)
                                                                                      (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry14getNormalArrayEv" get-normal-array) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry14getNormalArrayEv" get-normal-array) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry13setNormalDataERKNS0_9ArrayDataE" set-normal-data) :void (this :pointer)
                                                                                          (array-data array-data))

(cffi:defcfun ("_ZN3osg8Geometry13getNormalDataEv" get-normal-data) array-data (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry13getNormalDataEv" get-normal-data) array-data (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry15setColorBindingENS0_16AttributeBindingE" set-color-binding) :void (this :pointer)
                                                                                                    (ab attribute-binding))

(cffi:defcfun ("_ZNK3osg8Geometry15getColorBindingEv" get-color-binding) attribute-binding (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry13setColorArrayEPNS_5ArrayE" set-color-array) :void (this :pointer)
                                                                                    (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry13getColorArrayEv" get-color-array) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry13getColorArrayEv" get-color-array) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry12setColorDataERKNS0_9ArrayDataE" set-color-data) :void (this :pointer)
                                                                                        (array-data array-data))

(cffi:defcfun ("_ZN3osg8Geometry12getColorDataEv" get-color-data) array-data (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry12getColorDataEv" get-color-data) array-data (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry24setSecondaryColorBindingENS0_16AttributeBindingE" set-secondary-color-binding) :void (this :pointer)
                                                                                                                       (ab attribute-binding))

(cffi:defcfun ("_ZNK3osg8Geometry24getSecondaryColorBindingEv" get-secondary-color-binding) attribute-binding (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry22setSecondaryColorArrayEPNS_5ArrayE" set-secondary-color-array) :void (this :pointer)
                                                                                                       (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry22getSecondaryColorArrayEv" get-secondary-color-array) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry22getSecondaryColorArrayEv" get-secondary-color-array) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry21setSecondaryColorDataERKNS0_9ArrayDataE" set-secondary-color-data) :void (this :pointer)
                                                                                                           (array-data array-data))

(cffi:defcfun ("_ZN3osg8Geometry21getSecondaryColorDataEv" get-secondary-color-data) array-data (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry21getSecondaryColorDataEv" get-secondary-color-data) array-data (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry18setFogCoordBindingENS0_16AttributeBindingE" set-fog-coord-binding) :void (this :pointer)
                                                                                                           (ab attribute-binding))

(cffi:defcfun ("_ZNK3osg8Geometry18getFogCoordBindingEv" get-fog-coord-binding) attribute-binding (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry16setFogCoordArrayEPNS_5ArrayE" set-fog-coord-array) :void (this :pointer)
                                                                                           (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry16getFogCoordArrayEv" get-fog-coord-array) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry16getFogCoordArrayEv" get-fog-coord-array) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry15setFogCoordDataERKNS0_9ArrayDataE" set-fog-coord-data) :void (this :pointer)
                                                                                               (array-data array-data))

(cffi:defcfun ("_ZN3osg8Geometry15getFogCoordDataEv" get-fog-coord-data) array-data (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry15getFogCoordDataEv" get-fog-coord-data) array-data (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry16setTexCoordArrayEjPNS_5ArrayE" set-tex-coord-array) :void (this :pointer)
                                                                                            (unit :unsigned-int)
                                                                                            (arg2 :pointer))

(cffi:defcfun ("_ZN3osg8Geometry16getTexCoordArrayEj" get-tex-coord-array) :pointer (this :pointer)
                                                                                    (unit :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry16getTexCoordArrayEj" get-tex-coord-array) :pointer (this :pointer)
                                                                                     (unit :unsigned-int))

(cffi:defcfun ("_ZN3osg8Geometry15setTexCoordDataEjRKNS0_9ArrayDataE" set-tex-coord-data) :void (this :pointer)
                                                                                                (index :unsigned-int)
                                                                                                (array-data array-data))

(cffi:defcfun ("_ZN3osg8Geometry15getTexCoordDataEj" get-tex-coord-data) array-data (this :pointer)
                                                                                    (index :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry15getTexCoordDataEj" get-tex-coord-data) array-data (this :pointer)
                                                                                     (index :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry20getNumTexCoordArraysEv" get-num-tex-coord-arrays) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry20getTexCoordArrayListEv" get-tex-coord-array-list) vector-<osg-::-geometry-::-array-data-,std-::allocator-<osg-::-geometry-::-array-data-> > (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry20getTexCoordArrayListEv" get-tex-coord-array-list) vector-<osg-::-geometry-::-array-data-,std-::allocator-<osg-::-geometry-::-array-data-> > (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry20setVertexAttribArrayEjPNS_5ArrayE" set-vertex-attrib-array) :void (this :pointer)
                                                                                                    (index :unsigned-int)
                                                                                                    (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry20getVertexAttribArrayEj" get-vertex-attrib-array) :pointer (this :pointer)
                                                                                            (index :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry20getVertexAttribArrayEj" get-vertex-attrib-array) :pointer (this :pointer)
                                                                                             (index :unsigned-int))

(cffi:defcfun ("_ZN3osg8Geometry22setVertexAttribBindingEjNS0_16AttributeBindingE" set-vertex-attrib-binding) :void (this :pointer)
                                                                                                                    (index :unsigned-int)
                                                                                                                    (ab attribute-binding))

(cffi:defcfun ("_ZNK3osg8Geometry22getVertexAttribBindingEj" get-vertex-attrib-binding) attribute-binding (this :pointer)
                                                                                                          (index :unsigned-int))

(cffi:defcfun ("_ZN3osg8Geometry24setVertexAttribNormalizeEjh" set-vertex-attrib-normalize) :void (this :pointer)
                                                                                                  (index :unsigned-int)
                                                                                                  (norm g-lboolean))

(cffi:defcfun ("_ZNK3osg8Geometry24getVertexAttribNormalizeEj" get-vertex-attrib-normalize) g-lboolean (this :pointer)
                                                                                                       (index :unsigned-int))

(cffi:defcfun ("_ZN3osg8Geometry19setVertexAttribDataEjRKNS0_9ArrayDataE" set-vertex-attrib-data) :void (this :pointer)
                                                                                                        (index :unsigned-int)
                                                                                                        (array-data array-data))

(cffi:defcfun ("_ZN3osg8Geometry19getVertexAttribDataEj" get-vertex-attrib-data) array-data (this :pointer)
                                                                                            (index :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry19getVertexAttribDataEj" get-vertex-attrib-data) array-data (this :pointer)
                                                                                             (index :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry24getNumVertexAttribArraysEv" get-num-vertex-attrib-arrays) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry24getVertexAttribArrayListEv" get-vertex-attrib-array-list) vector-<osg-::-geometry-::-array-data-,std-::allocator-<osg-::-geometry-::-array-data-> > (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry24getVertexAttribArrayListEv" get-vertex-attrib-array-list) vector-<osg-::-geometry-::-array-data-,std-::allocator-<osg-::-geometry-::-array-data-> > (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry19setPrimitiveSetListERKSt6vectorINS_7ref_ptrINS_12PrimitiveSetEEESaIS4_EE" set-primitive-set-list) :void (this :pointer)
                                                                                                                                          (primitives vector-<osg-::ref-ptr-<osg-::-primitive-set->,std-::allocator-<osg-::ref-ptr-<osg-::-primitive-set-> > >))

(cffi:defcfun ("_ZN3osg8Geometry19getPrimitiveSetListEv" get-primitive-set-list) vector-<osg-::ref-ptr-<osg-::-primitive-set->,std-::allocator-<osg-::ref-ptr-<osg-::-primitive-set-> > > (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry19getPrimitiveSetListEv" get-primitive-set-list) vector-<osg-::ref-ptr-<osg-::-primitive-set->,std-::allocator-<osg-::ref-ptr-<osg-::-primitive-set-> > > (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry19getNumPrimitiveSetsEv" get-num-primitive-sets) :unsigned-int (this :pointer))

(cffi:defcenum type
  (:primitive-type 0)
  (:draw-arrays-primitive-type 1)
  (:draw-array-lengths-primitive-type 2)
  (:draw-elements-u-byte-primitive-type 3)
  (:draw-elements-u-short-primitive-type 4)
  (:draw-elements-u-int-primitive-type 5))

(cffi:defcstruct primitive-set
  (_primitive-type type)
  (_num-instances :int)
  (_mode g-lenum)
  (_modified-count :unsigned-int)
  (_range-modified-count :unsigned-int))

(cffi:defcfun ("_ZN3osg8Geometry15getPrimitiveSetEj" get-primitive-set) :pointer (this :pointer)
                                                                                 (pos :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry15getPrimitiveSetEj" get-primitive-set) :pointer (this :pointer)
                                                                                  (pos :unsigned-int))

(cffi:defcfun ("_ZN3osg8Geometry15addPrimitiveSetEPNS_12PrimitiveSetE" add-primitive-set) :char (this :pointer)
                                                                                                (primitiveset :pointer))

(cffi:defcfun ("_ZN3osg8Geometry15setPrimitiveSetEjPNS_12PrimitiveSetE" set-primitive-set) :char (this :pointer)
                                                                                                 (i :unsigned-int)
                                                                                                 (primitiveset :pointer))

(cffi:defcfun ("_ZN3osg8Geometry18insertPrimitiveSetEjPNS_12PrimitiveSetE" insert-primitive-set) :char (this :pointer)
                                                                                                       (i :unsigned-int)
                                                                                                       (primitiveset :pointer))

(cffi:defcfun ("_ZN3osg8Geometry18removePrimitiveSetEjj" remove-primitive-set) :char (this :pointer)
                                                                                     (i :unsigned-int)
                                                                                     (num-elements-to-remove :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry20getPrimitiveSetIndexEPKNS_12PrimitiveSetE" get-primitive-set-index) :unsigned-int (this :pointer)
                                                                                                                     (primitiveset :pointer))

(cffi:defcstruct index-array
  )

(cffi:defcfun ("_ZN3osg8Geometry16setVertexIndicesEPNS_10IndexArrayE" set-vertex-indices) :void (this :pointer)
                                                                                                (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry16getVertexIndicesEv" get-vertex-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry16getVertexIndicesEv" get-vertex-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry16setNormalIndicesEPNS_10IndexArrayE" set-normal-indices) :void (this :pointer)
                                                                                                (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry16getNormalIndicesEv" get-normal-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry16getNormalIndicesEv" get-normal-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry15setColorIndicesEPNS_10IndexArrayE" set-color-indices) :void (this :pointer)
                                                                                              (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry15getColorIndicesEv" get-color-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry15getColorIndicesEv" get-color-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry24setSecondaryColorIndicesEPNS_10IndexArrayE" set-secondary-color-indices) :void (this :pointer)
                                                                                                                 (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry24getSecondaryColorIndicesEv" get-secondary-color-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry24getSecondaryColorIndicesEv" get-secondary-color-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry18setFogCoordIndicesEPNS_10IndexArrayE" set-fog-coord-indices) :void (this :pointer)
                                                                                                     (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry18getFogCoordIndicesEv" get-fog-coord-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry18getFogCoordIndicesEv" get-fog-coord-indices) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry18setTexCoordIndicesEjPNS_10IndexArrayE" set-tex-coord-indices) :void (this :pointer)
                                                                                                      (unit :unsigned-int)
                                                                                                      (arg2 :pointer))

(cffi:defcfun ("_ZN3osg8Geometry18getTexCoordIndicesEj" get-tex-coord-indices) :pointer (this :pointer)
                                                                                        (unit :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry18getTexCoordIndicesEj" get-tex-coord-indices) :pointer (this :pointer)
                                                                                         (unit :unsigned-int))

(cffi:defcfun ("_ZN3osg8Geometry22setVertexAttribIndicesEjPNS_10IndexArrayE" set-vertex-attrib-indices) :void (this :pointer)
                                                                                                              (index :unsigned-int)
                                                                                                              (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry22getVertexAttribIndicesEj" get-vertex-attrib-indices) :pointer (this :pointer)
                                                                                                (index :unsigned-int))

(cffi:defcfun ("_ZNK3osg8Geometry22getVertexAttribIndicesEj" get-vertex-attrib-indices) :pointer (this :pointer)
                                                                                                 (index :unsigned-int))

(cffi:defcfun ("_ZN3osg8Geometry25setUseVertexBufferObjectsEb" set-use-vertex-buffer-objects) :void (this :pointer)
                                                                                                    (flag :char))

(cffi:defcfun ("_ZN3osg8Geometry16dirtyDisplayListEv" dirty-display-list) :void (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry21resizeGLObjectBuffersEj" resize-gl-object-buffers) :void (this :pointer)
                                                                                           (max-size :unsigned-int))

(cffi::defctype g-lbitfield :unsigned-int)

(cffi:defcstruct thread
  (_prv-data (:pointer :void)))

(cffi:defcstruct mutex
  (_prv-data (:pointer :void)))

(cffi:defcstruct graphics-context
  (_cameras list-<osg-::-camera-*,std-::allocator-<osg-::-camera-*> >)
  (_traits ref-ptr-<osg-::-graphics-context-::-traits->)
  (_state ref-ptr-<osg-::-state->)
  (_clear-color vec-4)
  (_clear-mask g-lbitfield)
  (_thread-of-last-make-current :pointer)
  (_operations-mutex mutex)
  (_operations-block ref-ptr-<osg-::-ref-block->)
  (_operations list-<osg-::ref-ptr-<osg-::-operation->,std-::allocator-<osg-::ref-ptr-<osg-::-operation-> > >)
  (_current-operation ref-ptr-<osg-::-operation->)
  (_graphics-thread ref-ptr-<osg-::-graphics-thread->)
  (_resized-callback ref-ptr-<osg-::-graphics-context-::-resized-callback->))

(cffi:defcstruct matrixd
  (_mat :double :count 4 :count 4))

(cffi::defctype matrix matrixd)

(cffi:defcenum check-for-gl-errors
  (:never-check-gl-errors 0)
  (:once-per-frame 1)
  (:once-per-attribute 2))

(cffi:defcstruct program
  (_pcp-list buffered-value-<osg-::ref-ptr-<osg-::-program-::-per-context-program-> >)
  (_attrib-binding-list map-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,unsigned- int-,std-::less-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > >,std-::allocator-<std-::pair-<const- std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >, unsigned- int-> > >)
  (_frag-data-binding-list map-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,unsigned- int-,std-::less-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > >,std-::allocator-<std-::pair-<const- std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >, unsigned- int-> > >)
  (_shader-list vector-<osg-::ref-ptr-<osg-::-shader->,std-::allocator-<osg-::ref-ptr-<osg-::-shader-> > >)
  (_geometry-vertices-out g-lint)
  (_geometry-input-type g-lint)
  (_geometry-output-type g-lint))

(cffi::defctype g-luint :unsigned-int)

(cffi:defcstruct per-context-program
  (_program :pointer)
  (_extensions ref-ptr-<osg-::gl-2-extensions->)
  (_gl-program-handle g-luint)
  (_needs-link :char)
  (_is-linked :char)
  (_context-id :unsigned-int)
  (_uniform-info-map map-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,osg-::-program-::-active-var-info-,std-::less-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > >,std-::allocator-<std-::pair-<const- std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >, osg-::-program-::-active-var-info-> > >)
  (_attrib-info-map map-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,osg-::-program-::-active-var-info-,std-::less-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > >,std-::allocator-<std-::pair-<const- std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >, osg-::-program-::-active-var-info-> > >)
  (_last-applied-uniform-list vector-<std-::pair-<osg-::ref-ptr-<const- osg-::-uniform->, unsigned- int->,std-::allocator-<std-::pair-<osg-::ref-ptr-<const- osg-::-uniform->, unsigned- int-> > >)
  (_shaders-to-detach vector-<osg-::ref-ptr-<osg-::-shader->,std-::allocator-<osg-::ref-ptr-<osg-::-shader-> > >)
  (_shaders-to-attach vector-<osg-::ref-ptr-<osg-::-shader->,std-::allocator-<osg-::ref-ptr-<osg-::-shader-> > >))

(cffi:defcstruct enabled-array-pair
  (_dirty :char)
  (_enabled :char)
  (_normalized g-lboolean)
  (_pointer :pointer))

(cffi:defcstruct vertex-buffer-object
  (_buffer-entry-array-pairs vector-<std-::pair-<osg-::-buffer-object-::-buffer-entry-, osg-::-array-*>,std-::allocator-<std-::pair-<osg-::-buffer-object-::-buffer-entry-, osg-::-array-*> > >))

(cffi:defcstruct element-buffer-object
  (_buffer-entry-draw-elements-pairs vector-<std-::pair-<osg-::-buffer-object-::-buffer-entry-, osg-::-draw-elements-*>,std-::allocator-<std-::pair-<osg-::-buffer-object-::-buffer-entry-, osg-::-draw-elements-*> > >))

(cffi:defcstruct pixel-buffer-object
  (_buffer-entry-image-pair pair-<osg-::-buffer-object-::-buffer-entry-,osg-::-image-*>))

(cffi:defcstruct state
  (_graphics-context :pointer)
  (_context-id :unsigned-int)
  (_frame-stamp ref-ptr-<osg-::-frame-stamp->)
  (_identity ref-ptr-<const- osg-::-ref-matrixd->)
  (_initial-view-matrix ref-ptr-<const- osg-::-ref-matrixd->)
  (_projection ref-ptr-<const- osg-::-ref-matrixd->)
  (_model-view ref-ptr-<const- osg-::-ref-matrixd->)
  (_initial-inverse-view-matrix matrix)
  (_display-settings ref-ptr-<osg-::-display-settings->)
  (_abort-rendering-ptr (:pointer :char))
  (_check-gl-errors check-for-gl-errors)
  (_mode-map map-<unsigned- int-,osg-::-state-::-mode-stack-,std-::less-<unsigned- int->,std-::allocator-<std-::pair-<const- unsigned- int-, osg-::-state-::-mode-stack-> > >)
  (_attribute-map map-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->,osg-::-state-::-attribute-stack-,std-::less-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int-> >,std-::allocator-<std-::pair-<const- std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, osg-::-state-::-attribute-stack-> > >)
  (_uniform-map map-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,osg-::-state-::-uniform-stack-,std-::less-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > >,std-::allocator-<std-::pair-<const- std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >, osg-::-state-::-uniform-stack-> > >)
  (_texture-mode-map-list vector-<std-::map-<unsigned- int-, osg-::-state-::-mode-stack-, std-::less-<unsigned- int->, std-::allocator-<std-::pair-<const- unsigned- int-, osg-::-state-::-mode-stack-> > >,std-::allocator-<std-::map-<unsigned- int-, osg-::-state-::-mode-stack-, std-::less-<unsigned- int->, std-::allocator-<std-::pair-<const- unsigned- int-, osg-::-state-::-mode-stack-> > > > >)
  (_texture-attribute-map-list vector-<std-::map-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, osg-::-state-::-attribute-stack-, std-::less-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int-> >, std-::allocator-<std-::pair-<const- std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, osg-::-state-::-attribute-stack-> > >,std-::allocator-<std-::map-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, osg-::-state-::-attribute-stack-, std-::less-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int-> >, std-::allocator-<std-::pair-<const- std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, osg-::-state-::-attribute-stack-> > > > >)
  (_applied-program-object-set set-<const- osg-::-program-::-per-context-program-*,std-::less-<const- osg-::-program-::-per-context-program-*>,std-::allocator-<const- osg-::-program-::-per-context-program-*> >)
  (_last-applied-program-object :pointer)
  (_state-state-stack vector-<const- osg-::-state-set-*,std-::allocator-<const- osg-::-state-set-*> >)
  (_vertex-array enabled-array-pair)
  (_normal-array enabled-array-pair)
  (_color-array enabled-array-pair)
  (_secondary-color-array enabled-array-pair)
  (_index-array enabled-array-pair)
  (_fog-array enabled-array-pair)
  (_tex-coord-array-list vector-<osg-::-state-::-enabled-array-pair-,std-::allocator-<osg-::-state-::-enabled-array-pair-> >)
  (_vertex-attrib-array-list vector-<osg-::-state-::-enabled-array-pair-,std-::allocator-<osg-::-state-::-enabled-array-pair-> >)
  (_current-active-texture-unit :unsigned-int)
  (_current-client-active-texture-unit :unsigned-int)
  (_current-vbo :pointer)
  (_current-ebo :pointer)
  (_current-pbo :pointer)
  (_is-secondary-color-support-resolved :char)
  (_is-secondary-color-supported :char)
  (_is-fog-coord-support-resolved :char)
  (_is-fog-coord-supported :char)
  (_is-vertex-buffer-object-support-resolved :char)
  (_is-vertex-buffer-object-supported :char)
  (_extension-procs-initialized :char)
  (_gl-max-texture-coords g-lint)
  (_gl-max-texture-units g-lint)
  (_gl-client-active-texture :pointer)
  (_gl-active-texture :pointer)
  (_gl-fog-coord-pointer :pointer)
  (_gl-secondary-color-pointer :pointer)
  (_gl-vertex-attrib-pointer :pointer)
  (_gl-enable-vertex-attrib-array :pointer)
  (_gl-disable-vertex-attrib-array :pointer)
  (_gl-bind-buffer :pointer)
  (_gl-draw-arrays-instanced :pointer)
  (_gl-draw-elements-instanced :pointer)
  (_dynamic-object-count :unsigned-int)
  (_complete-dynamic-object-rendering-callback ref-ptr-<osg-::-state-::-dynamic-object-rendering-completed-callback->))

(cffi:defcfun ("_ZNK3osg8Geometry16releaseGLObjectsEPNS_5StateE" release-gl-objects) :void (this :pointer)
                                                                                           (state :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry12getArrayListERSt6vectorIPNS_5ArrayESaIS3_EE" get-array-list) :char (this :pointer)
                                                                                                      (array-list vector-<osg-::-array-*,std-::allocator-<osg-::-array-*> >))

(cffi:defcfun ("_ZNK3osg8Geometry19getDrawElementsListERSt6vectorIPNS_12DrawElementsESaIS3_EE" get-draw-elements-list) :char (this :pointer)
                                                                                                                             (draw-elements-list vector-<osg-::-draw-elements-*,std-::allocator-<osg-::-draw-elements-*> >))

(cffi:defcfun ("_ZN3osg8Geometry29getOrCreateVertexBufferObjectEv" get-or-create-vertex-buffer-object) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry30getOrCreateElementBufferObjectEv" get-or-create-element-buffer-object) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry15setFastPathHintEb" set-fast-path-hint) :void (this :pointer)
                                                                               (on :char))

(cffi:defcfun ("_ZNK3osg8Geometry15getFastPathHintEv" get-fast-path-hint) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry16areFastPathsUsedEv" are-fast-paths-used) :char (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry20computeFastPathsUsedEv" compute-fast-paths-used) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry14verifyBindingsEv" verify-bindings) :char (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry35computeCorrectBindingsAndArraySizesEv" compute-correct-bindings-and-array-sizes) :void (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry23suitableForOptimizationEv" suitable-for-optimization) :char (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry17copyToAndOptimizeERS0_" copy-to-and-optimize) :void (this :pointer)
                                                                                      (target geometry))

(cffi:defcfun ("_ZNK3osg8Geometry20containsSharedArraysEv" contains-shared-arrays) :char (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry21duplicateSharedArraysEv" duplicate-shared-arrays) :void (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry32computeInternalOptimizedGeometryEv" compute-internal-optimized-geometry) :void (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry31removeInternalOptimizedGeometryEv" remove-internal-optimized-geometry) :void (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry28setInternalOptimizedGeometryEPS0_" set-internal-optimized-geometry) :void (this :pointer)
                                                                                                            (geometry :pointer))

(cffi:defcfun ("_ZN3osg8Geometry28getInternalOptimizedGeometryEv" get-internal-optimized-geometry) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry28getInternalOptimizedGeometryEv" get-internal-optimized-geometry) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg8Geometry19getGLObjectSizeHintEv" get-gl-object-size-hint) :unsigned-int (this :pointer))

(cffi:defcstruct render-info
  (_state ref-ptr-<osg-::-state->)
  (_view observer-ptr-<osg-::-view->)
  (_cameras vector-<osg-::-camera-*,std-::allocator-<osg-::-camera-*> >)
  (_user-data ref-ptr-<osg-::-referenced->))

(cffi:defcfun ("_ZNK3osg8Geometry18drawImplementationERNS_10RenderInfoE" draw-implementation) :void (this :pointer)
                                                                                                    (render-info render-info))

(cffi:defcstruct attribute-functor
  )

(cffi:defcfun ("_ZNK3osg8Geometry8supportsERKNS_8Drawable16AttributeFunctorE" supports) :char (this :pointer)
                                                                                              (arg1 attribute-functor))

(cffi:defcfun ("_ZN3osg8Geometry6acceptERNS_8Drawable16AttributeFunctorE" accept) :void (this :pointer)
                                                                                        (af attribute-functor))

(cffi:defcstruct const-attribute-functor
  )

(cffi:defcfun ("_ZNK3osg8Geometry8supportsERKNS_8Drawable21ConstAttributeFunctorE" supports) :char (this :pointer)
                                                                                                   (arg1 const-attribute-functor))

(cffi:defcfun ("_ZNK3osg8Geometry6acceptERNS_8Drawable21ConstAttributeFunctorE" accept) :void (this :pointer)
                                                                                              (af const-attribute-functor))

(cffi:defcstruct primitive-functor
  )

(cffi:defcfun ("_ZNK3osg8Geometry8supportsERKNS_16PrimitiveFunctorE" supports) :char (this :pointer)
                                                                                     (arg1 primitive-functor))

(cffi:defcfun ("_ZNK3osg8Geometry6acceptERNS_16PrimitiveFunctorE" accept) :void (this :pointer)
                                                                                (pf primitive-functor))

(cffi:defcstruct primitive-index-functor
  )

(cffi:defcfun ("_ZNK3osg8Geometry8supportsERKNS_21PrimitiveIndexFunctorE" supports) :char (this :pointer)
                                                                                          (arg1 primitive-index-functor))

(cffi:defcfun ("_ZNK3osg8Geometry6acceptERNS_21PrimitiveIndexFunctorE" accept) :void (this :pointer)
                                                                                     (pf primitive-index-functor))

(cffi:defcfun ("_ZN3osg8GeometryaSERKS0_" geometry-operator-=) geometry (this :pointer)
                                                                        (arg1 geometry))

(cffi:defcfun ("_ZNK3osg8Geometry14verifyBindingsERKNS0_9ArrayDataE" verify-bindings) :char (this :pointer)
                                                                                            (array-data array-data))

(cffi:defcfun ("_ZNK3osg8Geometry14verifyBindingsERKNS0_13Vec3ArrayDataE" verify-bindings) :char (this :pointer)
                                                                                                 (array-data vec-3-array-data))

(cffi:defcfun ("_ZN3osg8Geometry35computeCorrectBindingsAndArraySizesERNS0_9ArrayDataEPKc" compute-correct-bindings-and-array-sizes) :void (this :pointer)
                                                                                                                                           (array-data array-data)
                                                                                                                                           (array-name :pointer))

(cffi:defcfun ("_ZN3osg8Geometry35computeCorrectBindingsAndArraySizesERNS0_13Vec3ArrayDataEPKc" compute-correct-bindings-and-array-sizes) :void (this :pointer)
                                                                                                                                                (array-data vec-3-array-data)
                                                                                                                                                (array-name :pointer))

(cffi:defcfun ("_ZN3osg8Geometry31addVertexBufferObjectIfRequiredEPNS_5ArrayE" add-vertex-buffer-object-if-required) :void (this :pointer)
                                                                                                                           (array :pointer))

(cffi:defcfun ("_ZN3osg8Geometry32addElementBufferObjectIfRequiredEPNS_12PrimitiveSetE" add-element-buffer-object-if-required) :void (this :pointer)
                                                                                                                                     (primitive-set :pointer))

(cffi::defctype drawable-list vector-<osg-::ref-ptr-<osg-::-drawable->,std-::allocator-<osg-::ref-ptr-<osg-::-drawable-> > >)

(cffi:defcfun ("_ZN3osg5GeodeC1Ev" geode-constructor) :void (this :pointer))

(cl:defun geode-new ()
  (cl:let ((instance (cffi:foreign-alloc 'geode)))
    (geode-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5GeodeC1ERKS0_RKNS_6CopyOpE" geode-constructor) :void (this :pointer)
                                                                             (arg1 geode)
                                                                             (copyop copy-op))

(cl:defun geode-new ()
  (cl:let ((instance (cffi:foreign-alloc 'geode)))
    (geode-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Geode9cloneTypeEv" clone-type) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg5Geode5cloneERKNS_6CopyOpE" clone) :pointer (this :pointer) (copyop copy-op))

(cffi:defcfun ("_ZNK3osg5Geode12isSameKindAsEPKNS_6ObjectE" is-same-kind-as) :char (this :pointer)
                                                                                   (obj :pointer))

(cffi:defcfun ("_ZNK3osg5Geode9classNameEv" class-name) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg5Geode11libraryNameEv" library-name) :pointer (this :pointer))

(cffi:defcenum visitor-type
  (:node-visitor 0)
  (:update-visitor 1)
  (:event-visitor 2)
  (:collect-occluder-visitor 3)
  (:cull-visitor 4))

(cffi:defcenum traversal-mode
  (:traverse-none 0)
  (:traverse-parents 1)
  (:traverse-all-children 2)
  (:traverse-active-children 3))

(cffi:defcstruct node-visitor
  (_visitor-type visitor-type)
  (_traversal-number :int)
  (_frame-stamp ref-ptr-<osg-::-frame-stamp->)
  (_traversal-mode traversal-mode)
  (_traversal-mask :unsigned-int)
  (_node-mask-override :unsigned-int)
  (_node-path node-path)
  (_user-data ref-ptr-<osg-::-referenced->)
  (_database-request-handler ref-ptr-<osg-::-node-visitor-::-database-request-handler->)
  (_image-request-handler ref-ptr-<osg-::-node-visitor-::-image-request-handler->))

(cffi:defcfun ("_ZN3osg5Geode6acceptERNS_11NodeVisitorE" accept) :void (this :pointer)
                                                                       (nv node-visitor))

(cffi:defcfun ("_ZN3osg5Geode7asGeodeEv" as-geode) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg5Geode7asGeodeEv" as-geode) :pointer (this :pointer))

(cffi:defcstruct drawable
  (_parents vector-<osg-::-node-*,std-::allocator-<osg-::-node-*> >)
  (_stateset ref-ptr-<osg-::-state-set->)
  (_initial-bound bounding-box)
  (_compute-bound-callback ref-ptr-<osg-::-drawable-::-compute-bounding-box-callback->)
  (_bounding-box bounding-box)
  (_bounding-box-computed :char)
  (_shape ref-ptr-<osg-::-shape->)
  (_supports-display-list :char)
  (_use-display-list :char)
  (_supports-vertex-buffer-objects :char)
  (_use-vertex-buffer-objects :char)
  (_globj-list buffered-value-<unsigned- int->)
  (_update-callback ref-ptr-<osg-::-drawable-::-update-callback->)
  (_num-children-requiring-update-traversal :unsigned-int)
  (_event-callback ref-ptr-<osg-::-drawable-::-event-callback->)
  (_num-children-requiring-event-traversal :unsigned-int)
  (_cull-callback ref-ptr-<osg-::-drawable-::-cull-callback->)
  (_draw-callback ref-ptr-<osg-::-drawable-::-draw-callback->))

(cffi:defcfun ("_ZN3osg5Geode11addDrawableEPNS_8DrawableE" add-drawable) :char (this :pointer)
                                                                               (drawable :pointer))

(cffi:defcfun ("_ZN3osg5Geode14removeDrawableEPNS_8DrawableE" remove-drawable) :char (this :pointer)
                                                                                     (drawable :pointer))

(cffi:defcfun ("_ZN3osg5Geode15removeDrawablesEjj" remove-drawables) :char (this :pointer)
                                                                           (i :unsigned-int)
                                                                           (num-drawables-to-remove :unsigned-int))

(cffi:defcfun ("_ZN3osg5Geode15replaceDrawableEPNS_8DrawableES2_" replace-drawable) :char (this :pointer)
                                                                                          (orig-draw :pointer)
                                                                                          (new-draw :pointer))

(cffi:defcfun ("_ZN3osg5Geode11setDrawableEjPNS_8DrawableE" set-drawable) :char (this :pointer)
                                                                                (i :unsigned-int)
                                                                                (drawable :pointer))

(cffi:defcfun ("_ZNK3osg5Geode15getNumDrawablesEv" get-num-drawables) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg5Geode11getDrawableEj" get-drawable) :pointer (this :pointer)
                                                                     (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Geode11getDrawableEj" get-drawable) :pointer (this :pointer)
                                                                      (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Geode16containsDrawableEPKNS_8DrawableE" contains-drawable) :char (this :pointer)
                                                                                           (gset :pointer))

(cffi:defcfun ("_ZNK3osg5Geode16getDrawableIndexEPKNS_8DrawableE" get-drawable-index) :unsigned-int (this :pointer)
                                                                                                    (drawable :pointer))

(cffi:defcfun ("_ZNK3osg5Geode15getDrawableListEv" get-drawable-list) vector-<osg-::ref-ptr-<osg-::-drawable->,std-::allocator-<osg-::ref-ptr-<osg-::-drawable-> > > (this :pointer))

(cffi:defcfun ("_ZN3osg5Geode16compileDrawablesERNS_10RenderInfoE" compile-drawables) :void (this :pointer)
                                                                                            (render-info render-info))

(cffi:defcfun ("_ZNK3osg5Geode14getBoundingBoxEv" get-bounding-box) bounding-box (this :pointer))

(cffi:defcfun ("_ZNK3osg5Geode12computeBoundEv" compute-bound) bounding-sphere (this :pointer))

(cffi:defcfun ("_ZN3osg5Geode21setThreadSafeRefUnrefEb" set-thread-safe-ref-unref) :void (this :pointer)
                                                                                         (thread-safe :char))

(cffi:defcfun ("_ZN3osg5Geode21resizeGLObjectBuffersEj" resize-gl-object-buffers) :void (this :pointer)
                                                                                        (max-size :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Geode16releaseGLObjectsEPNS_5StateE" release-gl-objects) :void (this :pointer)
                                                                                        (arg1 :pointer))

(cffi::defctype value-type :float)

(cffi:defcenum .-9
  (:num-components 3))

(cffi:defcfun ("_ZN3osg5Vec3faSERKS0_" vec-3f-operator-=) vec-3f (this :pointer) (arg1 vec-3f))

(cffi:defcfun ("_ZN3osg5Vec3fC1ERKS0_" vec-3f-constructor) :void (this :pointer) (arg1 vec-3f))

(cl:defun vec-3f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3f)))
    (vec-3f-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3fC1Ev" vec-3f-constructor) :void (this :pointer))

(cl:defun vec-3f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3f)))
    (vec-3f-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3fC1Efff" vec-3f-constructor) :void (this :pointer) (x :float) (y :float)
                                                               (z :float))

(cl:defun vec-3f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3f)))
    (vec-3f-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3fC1ERKNS_5Vec2fEf" vec-3f-constructor) :void (this :pointer)
                                                                         (v-2 vec-2f) (zz :float))

(cl:defun vec-3f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3f)))
    (vec-3f-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec3feqERKS0_" vec-3f-operator-==) :char (this :pointer) (v vec-3f))

(cffi:defcfun ("_ZNK3osg5Vec3fneERKS0_" vec-3f-operator-!=) :char (this :pointer) (v vec-3f))

(cffi:defcfun ("_ZN3osg5Vec3f3ptrEv" ptr) (:pointer :float) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3f3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3f3setEfff" set) :void (this :pointer) (x :float) (y :float) (z :float))

(cffi:defcfun ("_ZN3osg5Vec3f3setERKS0_" set) :void (this :pointer) (rhs vec-3f))

(cffi:defcfun ("_ZN3osg5Vec3fixEi" vec-3f-operator-[]) :float (this :pointer) (i :int))

(cffi:defcfun ("_ZNK3osg5Vec3fixEi" vec-3f-operator-[]) :float (this :pointer) (i :int))

(cffi:defcfun ("_ZN3osg5Vec3f1xEv" x) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3f1yEv" y) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3f1zEv" z) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3f1xEv" x) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3f1yEv" y) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3f1zEv" z) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3f5validEv" valid) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3f5isNaNEv" is-na-n) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3fmlERKS0_" vec-3f-operator-*) :float (this :pointer) (rhs vec-3f))

(cffi:defcfun ("_ZNK3osg5Vec3feoERKS0_" vec-3f-operator-^) vec-3f (this :pointer) (rhs vec-3f))

(cffi:defcfun ("_ZNK3osg5Vec3fmlEf" vec-3f-operator-*) vec-3f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec3fmLEf" vec-3f-operator-*=) vec-3f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec3fdvEf" vec-3f-operator-/) vec-3f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec3fdVEf" vec-3f-operator-/=) vec-3f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec3fplERKS0_" vec-3f-operator-+) vec-3f (this :pointer) (rhs vec-3f))

(cffi:defcfun ("_ZN3osg5Vec3fpLERKS0_" vec-3f-operator-+=) vec-3f (this :pointer) (rhs vec-3f))

(cffi:defcfun ("_ZNK3osg5Vec3fmiERKS0_" vec-3f-operator-) vec-3f (this :pointer) (rhs vec-3f))

(cffi:defcfun ("_ZN3osg5Vec3fmIERKS0_" vec-3f-operator-=) vec-3f (this :pointer) (rhs vec-3f))

(cffi:defcfun ("_ZNK3osg5Vec3fngEv" vec-3f-operator-) vec-3f (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3f6lengthEv" length) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3f7length2Ev" length-2) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3f9normalizeEv" normalize) :float (this :pointer))

(cffi::defctype parent-list vector-<osg-::-group-*,std-::allocator-<osg-::-group-*> >)

(cffi::defctype node-mask :unsigned-int)

(cffi::defctype description-list vector-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,std-::allocator-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > > >)

(cffi:defcfun ("_ZN3osg4NodeC1Ev" node-constructor) :void (this :pointer))

(cl:defun node-new ()
  (cl:let ((instance (cffi:foreign-alloc 'node)))
    (node-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg4NodeC1ERKS0_RKNS_6CopyOpE" node-constructor) :void (this :pointer)
                                                                           (arg1 node)
                                                                           (copyop copy-op))

(cl:defun node-new ()
  (cl:let ((instance (cffi:foreign-alloc 'node)))
    (node-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg4Node9cloneTypeEv" clone-type) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node5cloneERKNS_6CopyOpE" clone) :pointer (this :pointer) (copyop copy-op))

(cffi:defcfun ("_ZNK3osg4Node12isSameKindAsEPKNS_6ObjectE" is-same-kind-as) :char (this :pointer)
                                                                                  (obj :pointer))

(cffi:defcfun ("_ZNK3osg4Node11libraryNameEv" library-name) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node9classNameEv" class-name) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node7asGroupEv" as-group) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node7asGroupEv" as-group) :pointer (this :pointer))

(cffi:defcenum reference-frame
  (:relative-rf 0)
  (:absolute-rf 1)
  (:absolute-rf-inherit-viewpoint 2))

(cffi:defcstruct transform
  (_reference-frame reference-frame))

(cffi:defcfun ("_ZN3osg4Node11asTransformEv" as-transform) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node11asTransformEv" as-transform) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node8asSwitchEv" as-switch) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node8asSwitchEv" as-switch) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node7asGeodeEv" as-geode) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node7asGeodeEv" as-geode) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node6acceptERNS_11NodeVisitorE" accept) :void (this :pointer)
                                                                      (nv node-visitor))

(cffi:defcfun ("_ZN3osg4Node6ascendERNS_11NodeVisitorE" ascend) :void (this :pointer)
                                                                      (nv node-visitor))

(cffi:defcfun ("_ZN3osg4Node8traverseERNS_11NodeVisitorE" traverse) :void (this :pointer)
                                                                          (arg1 node-visitor))

(cffi:defcfun ("_ZNK3osg4Node10getParentsEv" get-parents) vector-<osg-::-group-*,std-::allocator-<osg-::-group-*> > (this :pointer))

(cffi:defcfun ("_ZN3osg4Node10getParentsEv" get-parents) vector-<osg-::-group-*,std-::allocator-<osg-::-group-*> > (this :pointer))

(cffi:defcfun ("_ZN3osg4Node9getParentEj" get-parent) :pointer (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg4Node9getParentEj" get-parent) :pointer (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg4Node13getNumParentsEv" get-num-parents) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node20getParentalNodePathsEPS0_" get-parental-node-paths) node-path-list (this :pointer)
                                                                                                  (halt-traversal-at-node :pointer))

(cffi:defcfun ("_ZNK3osg4Node16getWorldMatricesEPKS0_" get-world-matrices) matrix-list (this :pointer)
                                                                                       (halt-traversal-at-node :pointer))

(cffi:defcstruct node-callback
  (_nested-callback ref-ptr-<osg-::-node-callback->))

(cffi:defcfun ("_ZN3osg4Node17setUpdateCallbackEPNS_12NodeCallbackE" set-update-callback) :void (this :pointer)
                                                                                                (nc :pointer))

(cffi:defcfun ("_ZN3osg4Node17getUpdateCallbackEv" get-update-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node17getUpdateCallbackEv" get-update-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node17addUpdateCallbackEPNS_12NodeCallbackE" add-update-callback) :void (this :pointer)
                                                                                                (nc :pointer))

(cffi:defcfun ("_ZN3osg4Node20removeUpdateCallbackEPNS_12NodeCallbackE" remove-update-callback) :void (this :pointer)
                                                                                                      (nc :pointer))

(cffi:defcfun ("_ZNK3osg4Node38getNumChildrenRequiringUpdateTraversalEv" get-num-children-requiring-update-traversal) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg4Node16setEventCallbackEPNS_12NodeCallbackE" set-event-callback) :void (this :pointer)
                                                                                              (nc :pointer))

(cffi:defcfun ("_ZN3osg4Node16getEventCallbackEv" get-event-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node16getEventCallbackEv" get-event-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node16addEventCallbackEPNS_12NodeCallbackE" add-event-callback) :void (this :pointer)
                                                                                              (nc :pointer))

(cffi:defcfun ("_ZN3osg4Node19removeEventCallbackEPNS_12NodeCallbackE" remove-event-callback) :void (this :pointer)
                                                                                                    (nc :pointer))

(cffi:defcfun ("_ZNK3osg4Node37getNumChildrenRequiringEventTraversalEv" get-num-children-requiring-event-traversal) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg4Node15setCullCallbackEPNS_12NodeCallbackE" set-cull-callback) :void (this :pointer)
                                                                                            (nc :pointer))

(cffi:defcfun ("_ZN3osg4Node15getCullCallbackEv" get-cull-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node15getCullCallbackEv" get-cull-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node15addCullCallbackEPNS_12NodeCallbackE" add-cull-callback) :void (this :pointer)
                                                                                            (nc :pointer))

(cffi:defcfun ("_ZN3osg4Node18removeCullCallbackEPNS_12NodeCallbackE" remove-cull-callback) :void (this :pointer)
                                                                                                  (nc :pointer))

(cffi:defcfun ("_ZN3osg4Node16setCullingActiveEb" set-culling-active) :void (this :pointer)
                                                                            (active :char))

(cffi:defcfun ("_ZNK3osg4Node16getCullingActiveEv" get-culling-active) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node33getNumChildrenWithCullingDisabledEv" get-num-children-with-culling-disabled) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node15isCullingActiveEv" is-culling-active) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node31getNumChildrenWithOccluderNodesEv" get-num-children-with-occluder-nodes) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node21containsOccluderNodesEv" contains-occluder-nodes) :char (this :pointer))

(cffi:defcfun ("_ZN3osg4Node11setNodeMaskEj" set-node-mask) :void (this :pointer) (nm :unsigned-int))

(cffi:defcfun ("_ZNK3osg4Node11getNodeMaskEv" get-node-mask) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg4Node15setDescriptionsERKSt6vectorISsSaISsEE" set-descriptions) :void (this :pointer)
                                                                                             (descriptions vector-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,std-::allocator-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > > >))

(cffi:defcfun ("_ZN3osg4Node15getDescriptionsEv" get-descriptions) vector-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,std-::allocator-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > > > (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node15getDescriptionsEv" get-descriptions) vector-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,std-::allocator-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > > > (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node14getDescriptionEj" get-description) string (this :pointer)
                                                                         (i :unsigned-int))

(cffi:defcfun ("_ZN3osg4Node14getDescriptionEj" get-description) string (this :pointer)
                                                                        (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg4Node18getNumDescriptionsEv" get-num-descriptions) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg4Node14addDescriptionERKSs" add-description) :void (this :pointer)
                                                                          (desc string))

(cffi:defcenum render-bin-mode
  (:inherit-renderbin-details 0)
  (:use-renderbin-details 1)
  (:override-renderbin-details 2))

(cffi:defcstruct state-set
  (_parents vector-<osg-::-object-*,std-::allocator-<osg-::-object-*> >)
  (_mode-list map-<unsigned- int-,unsigned- int-,std-::less-<unsigned- int->,std-::allocator-<std-::pair-<const- unsigned- int-, unsigned- int-> > >)
  (_attribute-list map-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->,std-::pair-<osg-::ref-ptr-<osg-::-state-attribute->, unsigned- int->,std-::less-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int-> >,std-::allocator-<std-::pair-<const- std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, std-::pair-<osg-::ref-ptr-<osg-::-state-attribute->, unsigned- int-> > > >)
  (_texture-mode-list vector-<std-::map-<unsigned- int-, unsigned- int-, std-::less-<unsigned- int->, std-::allocator-<std-::pair-<const- unsigned- int-, unsigned- int-> > >,std-::allocator-<std-::map-<unsigned- int-, unsigned- int-, std-::less-<unsigned- int->, std-::allocator-<std-::pair-<const- unsigned- int-, unsigned- int-> > > > >)
  (_texture-attribute-list vector-<std-::map-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, std-::pair-<osg-::ref-ptr-<osg-::-state-attribute->, unsigned- int->, std-::less-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int-> >, std-::allocator-<std-::pair-<const- std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, std-::pair-<osg-::ref-ptr-<osg-::-state-attribute->, unsigned- int-> > > >,std-::allocator-<std-::map-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, std-::pair-<osg-::ref-ptr-<osg-::-state-attribute->, unsigned- int->, std-::less-<std-::pair-<osg-::-state-attribute-::-type-, unsigned- int-> >, std-::allocator-<std-::pair-<const- std-::pair-<osg-::-state-attribute-::-type-, unsigned- int->, std-::pair-<osg-::ref-ptr-<osg-::-state-attribute->, unsigned- int-> > > > > >)
  (_uniform-list map-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >,std-::pair-<osg-::ref-ptr-<osg-::-uniform->, unsigned- int->,std-::less-<std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> > >,std-::allocator-<std-::pair-<const- std-::basic-string-<char-, std-::char-traits-<char->, std-::allocator-<char-> >, std-::pair-<osg-::ref-ptr-<osg-::-uniform->, unsigned- int-> > > >)
  (_rendering-hint :int)
  (_bin-mode render-bin-mode)
  (_bin-num :int)
  (_bin-name string)
  (_nest-render-bins :char)
  (_update-callback ref-ptr-<osg-::-state-set-::-callback->)
  (_num-children-requiring-update-traversal :unsigned-int)
  (_event-callback ref-ptr-<osg-::-state-set-::-callback->)
  (_num-children-requiring-event-traversal :unsigned-int))

(cffi:defcfun ("_ZN3osg4Node11setStateSetEPNS_8StateSetE" set-state-set) :void (this :pointer)
                                                                               (stateset :pointer))

(cffi:defcfun ("_ZN3osg4Node19getOrCreateStateSetEv" get-or-create-state-set) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node11getStateSetEv" get-state-set) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node11getStateSetEv" get-state-set) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node15setInitialBoundERKNS_18BoundingSphereImplINS_5Vec3fEEE" set-initial-bound) :void (this :pointer)
                                                                                                               (bsphere bounding-sphere))

(cffi:defcfun ("_ZNK3osg4Node15getInitialBoundEv" get-initial-bound) bounding-sphere (this :pointer))

(cffi:defcfun ("_ZN3osg4Node10dirtyBoundEv" dirty-bound) :void (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node8getBoundEv" get-bound) bounding-sphere (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node12computeBoundEv" compute-bound) bounding-sphere (this :pointer))

(cffi:defcfun ("_ZN3osg4Node32setComputeBoundingSphereCallbackEPNS0_29ComputeBoundingSphereCallbackE" set-compute-bounding-sphere-callback) :void (this :pointer)
                                                                                                                                                  (callback :pointer))

(cffi:defcfun ("_ZN3osg4Node32getComputeBoundingSphereCallbackEv" get-compute-bounding-sphere-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node32getComputeBoundingSphereCallbackEv" get-compute-bounding-sphere-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg4Node21setThreadSafeRefUnrefEb" set-thread-safe-ref-unref) :void (this :pointer)
                                                                                        (thread-safe :char))

(cffi:defcfun ("_ZN3osg4Node21resizeGLObjectBuffersEj" resize-gl-object-buffers) :void (this :pointer)
                                                                                       (arg1 :unsigned-int))

(cffi:defcfun ("_ZNK3osg4Node16releaseGLObjectsEPNS_5StateE" release-gl-objects) :void (this :pointer)
                                                                                       (arg1 :pointer))

(cffi:defcfun ("_ZN3osg4Node9addParentEPNS_5GroupE" add-parent) :void (this :pointer)
                                                                      (node :pointer))

(cffi:defcfun ("_ZN3osg4Node12removeParentEPNS_5GroupE" remove-parent) :void (this :pointer)
                                                                             (node :pointer))

(cffi:defcfun ("_ZN3osg4Node38setNumChildrenRequiringUpdateTraversalEj" set-num-children-requiring-update-traversal) :void (this :pointer)
                                                                                                                           (num :unsigned-int))

(cffi:defcfun ("_ZN3osg4Node37setNumChildrenRequiringEventTraversalEj" set-num-children-requiring-event-traversal) :void (this :pointer)
                                                                                                                         (num :unsigned-int))

(cffi:defcfun ("_ZN3osg4Node33setNumChildrenWithCullingDisabledEj" set-num-children-with-culling-disabled) :void (this :pointer)
                                                                                                                 (num :unsigned-int))

(cffi:defcfun ("_ZN3osg4Node31setNumChildrenWithOccluderNodesEj" set-num-children-with-occluder-nodes) :void (this :pointer)
                                                                                                             (num :unsigned-int))

(cffi:defcfun ("_ZN3osg5GroupC1Ev" group-constructor) :void (this :pointer))

(cl:defun group-new ()
  (cl:let ((instance (cffi:foreign-alloc 'group)))
    (group-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5GroupC1ERKS0_RKNS_6CopyOpE" group-constructor) :void (this :pointer)
                                                                             (arg1 group)
                                                                             (copyop copy-op))

(cl:defun group-new ()
  (cl:let ((instance (cffi:foreign-alloc 'group)))
    (group-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Group9cloneTypeEv" clone-type) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg5Group5cloneERKNS_6CopyOpE" clone) :pointer (this :pointer) (copyop copy-op))

(cffi:defcfun ("_ZNK3osg5Group12isSameKindAsEPKNS_6ObjectE" is-same-kind-as) :char (this :pointer)
                                                                                   (obj :pointer))

(cffi:defcfun ("_ZNK3osg5Group9classNameEv" class-name) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg5Group11libraryNameEv" library-name) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Group6acceptERNS_11NodeVisitorE" accept) :void (this :pointer)
                                                                       (nv node-visitor))

(cffi:defcfun ("_ZN3osg5Group7asGroupEv" as-group) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg5Group7asGroupEv" as-group) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Group8traverseERNS_11NodeVisitorE" traverse) :void (this :pointer)
                                                                           (nv node-visitor))

(cffi:defcfun ("_ZN3osg5Group8addChildEPNS_4NodeE" add-child) :char (this :pointer) (child :pointer))

(cffi:defcfun ("_ZN3osg5Group11insertChildEjPNS_4NodeE" insert-child) :char (this :pointer)
                                                                            (index :unsigned-int)
                                                                            (child :pointer))

(cffi:defcfun ("_ZN3osg5Group11removeChildEPNS_4NodeE" remove-child) :char (this :pointer)
                                                                           (child :pointer))

(cffi:defcfun ("_ZN3osg5Group11removeChildEjj" remove-child) :char (this :pointer)
                                                                   (pos :unsigned-int)
                                                                   (num-children-to-remove :unsigned-int))

(cffi:defcfun ("_ZN3osg5Group14removeChildrenEjj" remove-children) :char (this :pointer)
                                                                         (pos :unsigned-int)
                                                                         (num-children-to-remove :unsigned-int))

(cffi:defcfun ("_ZN3osg5Group12replaceChildEPNS_4NodeES2_" replace-child) :char (this :pointer)
                                                                                (orig-child :pointer)
                                                                                (new-child :pointer))

(cffi:defcfun ("_ZNK3osg5Group14getNumChildrenEv" get-num-children) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg5Group8setChildEjPNS_4NodeE" set-child) :char (this :pointer)
                                                                     (i :unsigned-int)
                                                                     (node :pointer))

(cffi:defcfun ("_ZN3osg5Group8getChildEj" get-child) :pointer (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Group8getChildEj" get-child) :pointer (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Group12containsNodeEPKNS_4NodeE" contains-node) :char (this :pointer)
                                                                               (node :pointer))

(cffi:defcfun ("_ZNK3osg5Group13getChildIndexEPKNS_4NodeE" get-child-index) :unsigned-int (this :pointer)
                                                                                          (node :pointer))

(cffi:defcfun ("_ZN3osg5Group21setThreadSafeRefUnrefEb" set-thread-safe-ref-unref) :void (this :pointer)
                                                                                         (thread-safe :char))

(cffi:defcfun ("_ZN3osg5Group21resizeGLObjectBuffersEj" resize-gl-object-buffers) :void (this :pointer)
                                                                                        (max-size :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Group16releaseGLObjectsEPNS_5StateE" release-gl-objects) :void (this :pointer)
                                                                                        (arg1 :pointer))

(cffi:defcfun ("_ZNK3osg5Group12computeBoundEv" compute-bound) bounding-sphere (this :pointer))

(cffi:defcfun ("_ZN3osg5Group12childRemovedEjj" child-removed) :void (this :pointer)
                                                                     (arg1 :unsigned-int)
                                                                     (arg2 :unsigned-int))

(cffi:defcfun ("_ZN3osg5Group13childInsertedEj" child-inserted) :void (this :pointer)
                                                                      (arg1 :unsigned-int))

(cffi::defctype value-type :float)

(cffi:defcenum .-5
  (:num-components 2))

(cffi:defcfun ("_ZN3osg5Vec2faSERKS0_" vec-2f-operator-=) vec-2f (this :pointer) (arg1 vec-2f))

(cffi:defcfun ("_ZN3osg5Vec2fC1ERKS0_" vec-2f-constructor) :void (this :pointer) (arg1 vec-2f))

(cl:defun vec-2f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2f)))
    (vec-2f-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2fC1Ev" vec-2f-constructor) :void (this :pointer))

(cl:defun vec-2f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2f)))
    (vec-2f-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2fC1Eff" vec-2f-constructor) :void (this :pointer) (x :float) (y :float))

(cl:defun vec-2f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2f)))
    (vec-2f-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec2feqERKS0_" vec-2f-operator-==) :char (this :pointer) (v vec-2f))

(cffi:defcfun ("_ZNK3osg5Vec2fneERKS0_" vec-2f-operator-!=) :char (this :pointer) (v vec-2f))

(cffi:defcfun ("_ZN3osg5Vec2f3ptrEv" ptr) (:pointer :float) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2f3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2f3setEff" set) :void (this :pointer) (x :float) (y :float))

(cffi:defcfun ("_ZN3osg5Vec2fixEi" vec-2f-operator-[]) :float (this :pointer) (i :int))

(cffi:defcfun ("_ZNK3osg5Vec2fixEi" vec-2f-operator-[]) :float (this :pointer) (i :int))

(cffi:defcfun ("_ZN3osg5Vec2f1xEv" x) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2f1yEv" y) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2f1xEv" x) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2f1yEv" y) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2f5validEv" valid) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2f5isNaNEv" is-na-n) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2fmlERKS0_" vec-2f-operator-*) :float (this :pointer) (rhs vec-2f))

(cffi:defcfun ("_ZNK3osg5Vec2fmlEf" vec-2f-operator-*) vec-2f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec2fmLEf" vec-2f-operator-*=) vec-2f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec2fdvEf" vec-2f-operator-/) vec-2f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec2fdVEf" vec-2f-operator-/=) vec-2f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec2fplERKS0_" vec-2f-operator-+) vec-2f (this :pointer) (rhs vec-2f))

(cffi:defcfun ("_ZN3osg5Vec2fpLERKS0_" vec-2f-operator-+=) vec-2f (this :pointer) (rhs vec-2f))

(cffi:defcfun ("_ZNK3osg5Vec2fmiERKS0_" vec-2f-operator-) vec-2f (this :pointer) (rhs vec-2f))

(cffi:defcfun ("_ZN3osg5Vec2fmIERKS0_" vec-2f-operator-=) vec-2f (this :pointer) (rhs vec-2f))

(cffi:defcfun ("_ZNK3osg5Vec2fngEv" vec-2f-operator-) vec-2f (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2f6lengthEv" length) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2f7length2Ev" length-2) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2f9normalizeEv" normalize) :float (this :pointer))

(cffi::defctype value-type :float)

(cffi:defcenum .-13
  (:num-components 4))

(cffi:defcfun ("_ZN3osg5Vec4faSERKS0_" vec-4f-operator-=) vec-4f (this :pointer) (arg1 vec-4f))

(cffi:defcfun ("_ZN3osg5Vec4fC1ERKS0_" vec-4f-constructor) :void (this :pointer) (arg1 vec-4f))

(cl:defun vec-4f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4f)))
    (vec-4f-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4fC1Ev" vec-4f-constructor) :void (this :pointer))

(cl:defun vec-4f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4f)))
    (vec-4f-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4fC1Effff" vec-4f-constructor) :void (this :pointer) (x :float)
                                                                (y :float) (z :float) (w :float))

(cl:defun vec-4f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4f)))
    (vec-4f-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4fC1ERKNS_5Vec3fEf" vec-4f-constructor) :void (this :pointer)
                                                                         (v-3 vec-3f) (w :float))

(cl:defun vec-4f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4f)))
    (vec-4f-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec4feqERKS0_" vec-4f-operator-==) :char (this :pointer) (v vec-4f))

(cffi:defcfun ("_ZNK3osg5Vec4fneERKS0_" vec-4f-operator-!=) :char (this :pointer) (v vec-4f))

(cffi:defcfun ("_ZN3osg5Vec4f3ptrEv" ptr) (:pointer :float) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f3setEffff" set) :void (this :pointer) (x :float) (y :float) (z :float)
                                                   (w :float))

(cffi:defcfun ("_ZN3osg5Vec4fixEj" vec-4f-operator-[]) :float (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Vec4fixEj" vec-4f-operator-[]) :float (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZN3osg5Vec4f1xEv" x) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f1yEv" y) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f1zEv" z) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f1wEv" w) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f1xEv" x) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f1yEv" y) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f1zEv" z) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f1wEv" w) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f1rEv" r) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f1gEv" g) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f1bEv" b) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f1aEv" a) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f1rEv" r) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f1gEv" g) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f1bEv" b) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f1aEv" a) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f6asABGREv" as-abgr) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f6asRGBAEv" as-rgba) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f5validEv" valid) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f5isNaNEv" is-na-n) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4fmlERKS0_" vec-4f-operator-*) :float (this :pointer) (rhs vec-4f))

(cffi:defcfun ("_ZNK3osg5Vec4fmlEf" vec-4f-operator-*) vec-4f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec4fmLEf" vec-4f-operator-*=) vec-4f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec4fdvEf" vec-4f-operator-/) vec-4f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec4fdVEf" vec-4f-operator-/=) vec-4f (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec4fplERKS0_" vec-4f-operator-+) vec-4f (this :pointer) (rhs vec-4f))

(cffi:defcfun ("_ZN3osg5Vec4fpLERKS0_" vec-4f-operator-+=) vec-4f (this :pointer) (rhs vec-4f))

(cffi:defcfun ("_ZNK3osg5Vec4fmiERKS0_" vec-4f-operator-) vec-4f (this :pointer) (rhs vec-4f))

(cffi:defcfun ("_ZN3osg5Vec4fmIERKS0_" vec-4f-operator-=) vec-4f (this :pointer) (rhs vec-4f))

(cffi:defcfun ("_ZNK3osg5Vec4fngEv" vec-4f-operator-) vec-4f (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f6lengthEv" length) :float (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4f7length2Ev" length-2) :float (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4f9normalizeEv" normalize) :float (this :pointer))

(cffi::defctype image-modified-count buffered-value-<unsigned- int->)

(cffi:defcfun ("_ZN3osg9Texture2DC1Ev" texture-2d-constructor) :void (this :pointer))

(cl:defun texture-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'texture-2d)))
    (texture-2d-constructor instance)
    instance))

(cffi:defcenum write-hint
  (:no-preference 0)
  (:store-inline 1)
  (:external-file 2))

(cffi:defcenum origin
  (:bottom-left 0)
  (:top-left 1))

(cffi:defcenum allocation-mode
  (:no-delete 0)
  (:use-new-delete 1)
  (:use-malloc-free 2))

(cffi:defcstruct image
  (_file-name string)
  (_write-hint write-hint)
  (_origin origin)
  (_s :int)
  (_t :int)
  (_r :int)
  (_internal-texture-format g-lint)
  (_pixel-format g-lenum)
  (_data-type g-lenum)
  (_packing :unsigned-int)
  (_allocation-mode allocation-mode)
  (_data (:pointer :unsigned-char))
  (_modified-count :unsigned-int)
  (_mipmap-data vector-<unsigned- int-,std-::allocator-<unsigned- int-> >)
  (_buffer-object ref-ptr-<osg-::-pixel-buffer-object->))

(cffi:defcfun ("_ZN3osg9Texture2DC1EPNS_5ImageE" texture-2d-constructor) :void (this :pointer)
                                                                               (image :pointer))

(cl:defun texture-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'texture-2d)))
    (texture-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg9Texture2DC1ERKS0_RKNS_6CopyOpE" texture-2d-constructor) :void (this :pointer)
                                                                                      (text texture-2d)
                                                                                      (copyop copy-op))

(cl:defun texture-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'texture-2d)))
    (texture-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg9Texture2D9cloneTypeEv" clone-type) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D5cloneERKNS_6CopyOpE" clone) :pointer (this :pointer)
                                                                        (copyop copy-op))

(cffi:defcfun ("_ZNK3osg9Texture2D12isSameKindAsEPKNS_6ObjectE" is-same-kind-as) :char (this :pointer)
                                                                                       (obj :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D11libraryNameEv" library-name) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D9classNameEv" class-name) :pointer (this :pointer))

(cffi:defcenum type
  (:texture 0)
  (:polygonmode 1)
  (:polygonoffset 2)
  (:material 3)
  (:alphafunc 4)
  (:antialias 5)
  (:colortable 6)
  (:cullface 7)
  (:fog 8)
  (:frontface 9)
  (:light 10)
  (:point 11)
  (:linewidth 12)
  (:linestipple 13)
  (:polygonstipple 14)
  (:shademodel 15)
  (:texenv 16)
  (:texenvfilter 17)
  (:texgen 18)
  (:texmat 19)
  (:lightmodel 20)
  (:blendfunc 21)
  (:blendequation 22)
  (:logicop 23)
  (:stencil 24)
  (:colormask 25)
  (:depth 26)
  (:viewport 27)
  (:scissor 28)
  (:blendcolor 29)
  (:multisample 30)
  (:clipplane 31)
  (:colormatrix 32)
  (:vertexprogram 33)
  (:fragmentprogram 34)
  (:pointsprite 35)
  (:program 36)
  (:clampcolor 37)
  (:hint 38)
  (:validator 39)
  (:viewmatrixextractor 40)
  (:osgnv-parameter-block 41)
  (:osgnvext-texture-shader 42)
  (:osgnvext-vertex-program 43)
  (:osgnvext-register-combiners 44)
  (:osgnvcg-program 45)
  (:osgnvslang-program 46)
  (:osgnvparse-program-parser 47))

(cffi:defcfun ("_ZNK3osg9Texture2D7getTypeEv" get-type) type (this :pointer))

(cffi:defcstruct state-attribute
  (_parents vector-<osg-::-state-set-*,std-::allocator-<osg-::-state-set-*> >)
  (_update-callback ref-ptr-<osg-::-state-attribute-::-callback->)
  (_event-callback ref-ptr-<osg-::-state-attribute-::-callback->))

(cffi:defcfun ("_ZNK3osg9Texture2D7compareERKNS_14StateAttributeE" compare) :int (this :pointer)
                                                                                 (rhs state-attribute))

(cffi:defcfun ("_ZNK3osg9Texture2D16getTextureTargetEv" get-texture-target) g-lenum (this :pointer))

(cffi:defcfun ("_ZN3osg9Texture2D8setImageEPNS_5ImageE" set-image) :void (this :pointer)
                                                                         (image :pointer))

(cffi:defcfun ("_ZN3osg9Texture2D8getImageEv" get-image) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D8getImageEv" get-image) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D16getModifiedCountEj" get-modified-count) :unsigned-int (this :pointer)
                                                                                          (context-id :unsigned-int))

(cffi:defcfun ("_ZN3osg9Texture2D8setImageEjPNS_5ImageE" set-image) :void (this :pointer)
                                                                          (arg1 :unsigned-int)
                                                                          (image :pointer))

(cffi:defcfun ("_ZN3osg9Texture2D8getImageEj" get-image) :pointer (this :pointer)
                                                                  (arg1 :unsigned-int))

(cffi:defcfun ("_ZNK3osg9Texture2D8getImageEj" get-image) :pointer (this :pointer)
                                                                   (arg1 :unsigned-int))

(cffi:defcfun ("_ZNK3osg9Texture2D12getNumImagesEv" get-num-images) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D14setTextureSizeEii" set-texture-size) :void (this :pointer)
                                                                               (width :int)
                                                                               (height :int))

(cffi:defcfun ("_ZN3osg9Texture2D15setTextureWidthEi" set-texture-width) :void (this :pointer)
                                                                               (width :int))

(cffi:defcfun ("_ZN3osg9Texture2D16setTextureHeightEi" set-texture-height) :void (this :pointer)
                                                                                 (height :int))

(cffi:defcfun ("_ZNK3osg9Texture2D15getTextureWidthEv" get-texture-width) :int (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D16getTextureHeightEv" get-texture-height) :int (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D15getTextureDepthEv" get-texture-depth) :int (this :pointer))

(cffi:defcfun ("_ZN3osg9Texture2D18setSubloadCallbackEPNS0_15SubloadCallbackE" set-subload-callback) :void (this :pointer)
                                                                                                           (cb :pointer))

(cffi:defcfun ("_ZN3osg9Texture2D18getSubloadCallbackEv" get-subload-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D18getSubloadCallbackEv" get-subload-callback) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D18setNumMipmapLevelsEj" set-num-mipmap-levels) :void (this :pointer)
                                                                                       (num :unsigned-int))

(cffi:defcfun ("_ZNK3osg9Texture2D18getNumMipmapLevelsEv" get-num-mipmap-levels) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZN3osg9Texture2D14copyTexImage2DERNS_5StateEiiii" copy-tex-image-2d) :void (this :pointer)
                                                                                            (state state)
                                                                                            (x :int)
                                                                                            (y :int)
                                                                                            (width :int)
                                                                                            (height :int))

(cffi:defcfun ("_ZN3osg9Texture2D17copyTexSubImage2DERNS_5StateEiiiiii" copy-tex-sub-image-2d) :void (this :pointer)
                                                                                                     (state state)
                                                                                                     (xoffset :int)
                                                                                                     (yoffset :int)
                                                                                                     (x :int)
                                                                                                     (y :int)
                                                                                                     (width :int)
                                                                                                     (height :int))

(cffi:defcfun ("_ZNK3osg9Texture2D5applyERNS_5StateE" apply) :void (this :pointer) (state state))

(cffi:defcfun ("_ZNK3osg9Texture2D21computeInternalFormatEv" compute-internal-format) :void (this :pointer))

(cffi:defcfun ("_ZNK3osg9Texture2D14allocateMipmapERNS_5StateE" allocate-mipmap) :void (this :pointer)
                                                                                       (state state))

(cffi:defcfun ("_ZN3osg25PositionAttitudeTransformC1Ev" position-attitude-transform-constructor) :void (this :pointer))

(cl:defun position-attitude-transform-new ()
  (cl:let ((instance (cffi:foreign-alloc 'position-attitude-transform)))
    (position-attitude-transform-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg25PositionAttitudeTransformC1ERKS0_RKNS_6CopyOpE" position-attitude-transform-constructor) :void (this :pointer)
                                                                                                                        (pat position-attitude-transform)
                                                                                                                        (copyop copy-op))

(cl:defun position-attitude-transform-new ()
  (cl:let ((instance (cffi:foreign-alloc 'position-attitude-transform)))
    (position-attitude-transform-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform9cloneTypeEv" clone-type) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform5cloneERKNS_6CopyOpE" clone) :pointer (this :pointer)
                                                                                         (copyop copy-op))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform12isSameKindAsEPKNS_6ObjectE" is-same-kind-as) :char (this :pointer)
                                                                                                        (obj :pointer))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform9classNameEv" class-name) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform11libraryNameEv" library-name) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg25PositionAttitudeTransform6acceptERNS_11NodeVisitorE" accept) :void (this :pointer)
                                                                                            (nv node-visitor))

(cffi:defcfun ("_ZN3osg25PositionAttitudeTransform27asPositionAttitudeTransformEv" as-position-attitude-transform) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform27asPositionAttitudeTransformEv" as-position-attitude-transform) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg25PositionAttitudeTransform11setPositionERKNS_5Vec3dE" set-position) :void (this :pointer)
                                                                                                  (pos vec-3d))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform11getPositionEv" get-position) vec-3d (this :pointer))

(cffi:defcfun ("_ZN3osg25PositionAttitudeTransform11setAttitudeERKNS_4QuatE" set-attitude) :void (this :pointer)
                                                                                                 (quat quat))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform11getAttitudeEv" get-attitude) quat (this :pointer))

(cffi:defcfun ("_ZN3osg25PositionAttitudeTransform8setScaleERKNS_5Vec3dE" set-scale) :void (this :pointer)
                                                                                           (scale vec-3d))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform8getScaleEv" get-scale) vec-3d (this :pointer))

(cffi:defcfun ("_ZN3osg25PositionAttitudeTransform13setPivotPointERKNS_5Vec3dE" set-pivot-point) :void (this :pointer)
                                                                                                       (pivot vec-3d))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform13getPivotPointEv" get-pivot-point) vec-3d (this :pointer))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform25computeLocalToWorldMatrixERNS_7MatrixdEPNS_11NodeVisitorE" compute-local-to-world-matrix) :char (this :pointer)
                                                                                                                                                     (matrix matrix)
                                                                                                                                                     (nv :pointer))

(cffi:defcfun ("_ZNK3osg25PositionAttitudeTransform25computeWorldToLocalMatrixERNS_7MatrixdEPNS_11NodeVisitorE" compute-world-to-local-matrix) :char (this :pointer)
                                                                                                                                                     (matrix matrix)
                                                                                                                                                     (nv :pointer))

(cffi::defctype value-type :unsigned-char)

(cffi:defcenum .-17
  (:num-components 4))

(cffi:defcfun ("_ZN3osg6Vec4ubaSERKS0_" vec-4ub-operator-=) vec-4ub (this :pointer) (arg1 vec-4ub))

(cffi:defcfun ("_ZN3osg6Vec4ubC1ERKS0_" vec-4ub-constructor) :void (this :pointer) (arg1 vec-4ub))

(cl:defun vec-4ub-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4ub)))
    (vec-4ub-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg6Vec4ubC1Ev" vec-4ub-constructor) :void (this :pointer))

(cl:defun vec-4ub-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4ub)))
    (vec-4ub-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg6Vec4ubC1Ehhhh" vec-4ub-constructor) :void (this :pointer) (x :unsigned-char)
                                                                  (y :unsigned-char)
                                                                  (z :unsigned-char)
                                                                  (w :unsigned-char))

(cl:defun vec-4ub-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4ub)))
    (vec-4ub-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg6Vec4ubeqERKS0_" vec-4ub-operator-==) :char (this :pointer) (v vec-4ub))

(cffi:defcfun ("_ZNK3osg6Vec4ubneERKS0_" vec-4ub-operator-!=) :char (this :pointer) (v vec-4ub))

(cffi:defcfun ("_ZN3osg6Vec4ub3ptrEv" ptr) (:pointer :unsigned-char) (this :pointer))

(cffi:defcfun ("_ZNK3osg6Vec4ub3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg6Vec4ub3setEhhhh" set) :void (this :pointer) (r :unsigned-char)
                                                    (g :unsigned-char) (b :unsigned-char)
                                                    (a :unsigned-char))

(cffi:defcfun ("_ZN3osg6Vec4ubixEj" vec-4ub-operator-[]) :unsigned-char (this :pointer)
                                                                        (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg6Vec4ubixEj" vec-4ub-operator-[]) :unsigned-char (this :pointer)
                                                                         (i :unsigned-int))

(cffi:defcfun ("_ZN3osg6Vec4ub1rEv" r) :unsigned-char (this :pointer))

(cffi:defcfun ("_ZN3osg6Vec4ub1gEv" g) :unsigned-char (this :pointer))

(cffi:defcfun ("_ZN3osg6Vec4ub1bEv" b) :unsigned-char (this :pointer))

(cffi:defcfun ("_ZN3osg6Vec4ub1aEv" a) :unsigned-char (this :pointer))

(cffi:defcfun ("_ZNK3osg6Vec4ub1rEv" r) :unsigned-char (this :pointer))

(cffi:defcfun ("_ZNK3osg6Vec4ub1gEv" g) :unsigned-char (this :pointer))

(cffi:defcfun ("_ZNK3osg6Vec4ub1bEv" b) :unsigned-char (this :pointer))

(cffi:defcfun ("_ZNK3osg6Vec4ub1aEv" a) :unsigned-char (this :pointer))

(cffi:defcfun ("_ZNK3osg6Vec4ubmlEf" vec-4ub-operator-*) vec-4ub (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg6Vec4ubmLEf" vec-4ub-operator-*=) vec-4ub (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg6Vec4ubdvEf" vec-4ub-operator-/) vec-4ub (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg6Vec4ubdVEf" vec-4ub-operator-/=) vec-4ub (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg6Vec4ubplERKS0_" vec-4ub-operator-+) vec-4ub (this :pointer) (rhs vec-4ub))

(cffi:defcfun ("_ZN3osg6Vec4ubpLERKS0_" vec-4ub-operator-+=) vec-4ub (this :pointer) (rhs vec-4ub))

(cffi:defcfun ("_ZNK3osg6Vec4ubmiERKS0_" vec-4ub-operator-) vec-4ub (this :pointer) (rhs vec-4ub))

(cffi:defcfun ("_ZN3osg6Vec4ubmIERKS0_" vec-4ub-operator-=) vec-4ub (this :pointer) (rhs vec-4ub))

(cffi::defctype value-type :char)

(cffi:defcenum .-6
  (:num-components 2))

(cffi:defcfun ("_ZN3osg5Vec2baSERKS0_" vec-2b-operator-=) vec-2b (this :pointer) (arg1 vec-2b))

(cffi:defcfun ("_ZN3osg5Vec2bC1ERKS0_" vec-2b-constructor) :void (this :pointer) (arg1 vec-2b))

(cl:defun vec-2b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2b)))
    (vec-2b-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2bC1Ev" vec-2b-constructor) :void (this :pointer))

(cl:defun vec-2b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2b)))
    (vec-2b-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2bC1Eaa" vec-2b-constructor) :void (this :pointer) (r :char) (g :char))

(cl:defun vec-2b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2b)))
    (vec-2b-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec2beqERKS0_" vec-2b-operator-==) :char (this :pointer) (v vec-2b))

(cffi:defcfun ("_ZNK3osg5Vec2bneERKS0_" vec-2b-operator-!=) :char (this :pointer) (v vec-2b))

(cffi:defcfun ("_ZN3osg5Vec2b3ptrEv" ptr) (:pointer :char) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2b3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2b3setEaa" set) :void (this :pointer) (x :char) (y :char))

(cffi:defcfun ("_ZN3osg5Vec2b3setERKS0_" set) :void (this :pointer) (rhs vec-2b))

(cffi:defcfun ("_ZN3osg5Vec2bixEi" vec-2b-operator-[]) :char (this :pointer) (i :int))

(cffi:defcfun ("_ZNK3osg5Vec2bixEi" vec-2b-operator-[]) :char (this :pointer) (i :int))

(cffi:defcfun ("_ZN3osg5Vec2b1xEv" x) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2b1yEv" y) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2b1xEv" x) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2b1yEv" y) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2b1rEv" r) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2b1gEv" g) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2b1rEv" r) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2b1gEv" g) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2bmlEf" vec-2b-operator-*) vec-2b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec2bmLEf" vec-2b-operator-*=) vec-2b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec2bdvEf" vec-2b-operator-/) vec-2b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec2bdVEf" vec-2b-operator-/=) vec-2b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec2bplERKS0_" vec-2b-operator-+) vec-2b (this :pointer) (rhs vec-2b))

(cffi:defcfun ("_ZN3osg5Vec2bpLERKS0_" vec-2b-operator-+=) vec-2b (this :pointer) (rhs vec-2b))

(cffi:defcfun ("_ZNK3osg5Vec2bmiERKS0_" vec-2b-operator-) vec-2b (this :pointer) (rhs vec-2b))

(cffi:defcfun ("_ZN3osg5Vec2bmIERKS0_" vec-2b-operator-=) vec-2b (this :pointer) (rhs vec-2b))

(cffi::defctype value-type :double)

(cffi:defcenum .-7
  (:num-components 2))

(cffi:defcfun ("_ZN3osg5Vec2daSERKS0_" vec-2d-operator-=) vec-2d (this :pointer) (arg1 vec-2d))

(cffi:defcfun ("_ZN3osg5Vec2dC1ERKS0_" vec-2d-constructor) :void (this :pointer) (arg1 vec-2d))

(cl:defun vec-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2d)))
    (vec-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2dC1Ev" vec-2d-constructor) :void (this :pointer))

(cl:defun vec-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2d)))
    (vec-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2dC1Edd" vec-2d-constructor) :void (this :pointer) (x :double)
                                                              (y :double))

(cl:defun vec-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2d)))
    (vec-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2dC1ERKNS_5Vec2fE" vec-2d-constructor) :void (this :pointer) (vec vec-2f))

(cl:defun vec-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2d)))
    (vec-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec2deqERKS0_" vec-2d-operator-==) :char (this :pointer) (v vec-2d))

(cffi:defcfun ("_ZNK3osg5Vec2dneERKS0_" vec-2d-operator-!=) :char (this :pointer) (v vec-2d))

(cffi:defcfun ("_ZN3osg5Vec2d3ptrEv" ptr) (:pointer :double) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2d3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2d3setEdd" set) :void (this :pointer) (x :double) (y :double))

(cffi:defcfun ("_ZN3osg5Vec2dixEi" vec-2d-operator-[]) :double (this :pointer) (i :int))

(cffi:defcfun ("_ZNK3osg5Vec2dixEi" vec-2d-operator-[]) :double (this :pointer) (i :int))

(cffi:defcfun ("_ZN3osg5Vec2d1xEv" x) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2d1yEv" y) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2d1xEv" x) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2d1yEv" y) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2d5validEv" valid) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2d5isNaNEv" is-na-n) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2dmlERKS0_" vec-2d-operator-*) :double (this :pointer) (rhs vec-2d))

(cffi:defcfun ("_ZNK3osg5Vec2dmlEd" vec-2d-operator-*) vec-2d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZN3osg5Vec2dmLEd" vec-2d-operator-*=) vec-2d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZNK3osg5Vec2ddvEd" vec-2d-operator-/) vec-2d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZN3osg5Vec2ddVEd" vec-2d-operator-/=) vec-2d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZNK3osg5Vec2dplERKS0_" vec-2d-operator-+) vec-2d (this :pointer) (rhs vec-2d))

(cffi:defcfun ("_ZN3osg5Vec2dpLERKS0_" vec-2d-operator-+=) vec-2d (this :pointer) (rhs vec-2d))

(cffi:defcfun ("_ZNK3osg5Vec2dmiERKS0_" vec-2d-operator-) vec-2d (this :pointer) (rhs vec-2d))

(cffi:defcfun ("_ZN3osg5Vec2dmIERKS0_" vec-2d-operator-=) vec-2d (this :pointer) (rhs vec-2d))

(cffi:defcfun ("_ZNK3osg5Vec2dngEv" vec-2d-operator-) vec-2d (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2d6lengthEv" length) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2d7length2Ev" length-2) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2d9normalizeEv" normalize) :double (this :pointer))

(cffi::defctype value-type :short)

(cffi:defcenum .-8
  (:num-components 2))

(cffi:defcfun ("_ZN3osg5Vec2saSERKS0_" vec-2s-operator-=) vec-2s (this :pointer) (arg1 vec-2s))

(cffi:defcfun ("_ZN3osg5Vec2sC1ERKS0_" vec-2s-constructor) :void (this :pointer) (arg1 vec-2s))

(cl:defun vec-2s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2s)))
    (vec-2s-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2sC1Ev" vec-2s-constructor) :void (this :pointer))

(cl:defun vec-2s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2s)))
    (vec-2s-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec2sC1Ess" vec-2s-constructor) :void (this :pointer) (x :short) (y :short))

(cl:defun vec-2s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-2s)))
    (vec-2s-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec2seqERKS0_" vec-2s-operator-==) :char (this :pointer) (v vec-2s))

(cffi:defcfun ("_ZNK3osg5Vec2sneERKS0_" vec-2s-operator-!=) :char (this :pointer) (v vec-2s))

(cffi:defcfun ("_ZN3osg5Vec2s3ptrEv" ptr) (:pointer :short) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2s3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2s3setEss" set) :void (this :pointer) (x :short) (y :short))

(cffi:defcfun ("_ZN3osg5Vec2s3setERKS0_" set) :void (this :pointer) (rhs vec-2s))

(cffi:defcfun ("_ZN3osg5Vec2sixEi" vec-2s-operator-[]) :short (this :pointer) (i :int))

(cffi:defcfun ("_ZNK3osg5Vec2sixEi" vec-2s-operator-[]) :short (this :pointer) (i :int))

(cffi:defcfun ("_ZN3osg5Vec2s1xEv" x) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2s1yEv" y) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2s1xEv" x) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2s1yEv" y) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2s1rEv" r) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec2s1gEv" g) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2s1rEv" r) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2s1gEv" g) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec2smlEs" vec-2s-operator-*) vec-2s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZN3osg5Vec2smLEs" vec-2s-operator-*=) vec-2s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZNK3osg5Vec2sdvEs" vec-2s-operator-/) vec-2s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZN3osg5Vec2sdVEs" vec-2s-operator-/=) vec-2s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZNK3osg5Vec2smlERKS0_" vec-2s-operator-*) vec-2s (this :pointer) (rhs vec-2s))

(cffi:defcfun ("_ZN3osg5Vec2smLERKS0_" vec-2s-operator-*=) vec-2s (this :pointer) (rhs vec-2s))

(cffi:defcfun ("_ZNK3osg5Vec2splERKS0_" vec-2s-operator-+) vec-2s (this :pointer) (rhs vec-2s))

(cffi:defcfun ("_ZN3osg5Vec2spLERKS0_" vec-2s-operator-+=) vec-2s (this :pointer) (rhs vec-2s))

(cffi:defcfun ("_ZNK3osg5Vec2smiERKS0_" vec-2s-operator-) vec-2s (this :pointer) (rhs vec-2s))

(cffi:defcfun ("_ZN3osg5Vec2smIERKS0_" vec-2s-operator-=) vec-2s (this :pointer) (rhs vec-2s))

(cffi:defcfun ("_ZNK3osg5Vec2sngEv" vec-2s-operator-) vec-2s (this :pointer))

(cffi::defctype value-type :char)

(cffi:defcenum .-10
  (:num-components 3))

(cffi:defcfun ("_ZN3osg5Vec3baSERKS0_" vec-3b-operator-=) vec-3b (this :pointer) (arg1 vec-3b))

(cffi:defcfun ("_ZN3osg5Vec3bC1ERKS0_" vec-3b-constructor) :void (this :pointer) (arg1 vec-3b))

(cl:defun vec-3b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3b)))
    (vec-3b-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3bC1Ev" vec-3b-constructor) :void (this :pointer))

(cl:defun vec-3b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3b)))
    (vec-3b-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3bC1Eaaa" vec-3b-constructor) :void (this :pointer) (r :char) (g :char)
                                                               (b :char))

(cl:defun vec-3b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3b)))
    (vec-3b-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec3beqERKS0_" vec-3b-operator-==) :char (this :pointer) (v vec-3b))

(cffi:defcfun ("_ZNK3osg5Vec3bneERKS0_" vec-3b-operator-!=) :char (this :pointer) (v vec-3b))

(cffi:defcfun ("_ZN3osg5Vec3b3ptrEv" ptr) (:pointer :char) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3b3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3b3setEaaa" set) :void (this :pointer) (r :char) (g :char) (b :char))

(cffi:defcfun ("_ZN3osg5Vec3b3setERKS0_" set) :void (this :pointer) (rhs vec-3b))

(cffi:defcfun ("_ZN3osg5Vec3bixEj" vec-3b-operator-[]) :char (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Vec3bixEj" vec-3b-operator-[]) :char (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZN3osg5Vec3b1xEv" x) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3b1yEv" y) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3b1zEv" z) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3b1xEv" x) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3b1yEv" y) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3b1zEv" z) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3b1rEv" r) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3b1gEv" g) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3b1bEv" b) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3b1rEv" r) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3b1gEv" g) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3b1bEv" b) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3bmlEf" vec-3b-operator-*) vec-3b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec3bmLEf" vec-3b-operator-*=) vec-3b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec3bdvEf" vec-3b-operator-/) vec-3b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec3bdVEf" vec-3b-operator-/=) vec-3b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec3bplERKS0_" vec-3b-operator-+) vec-3b (this :pointer) (rhs vec-3b))

(cffi:defcfun ("_ZN3osg5Vec3bpLERKS0_" vec-3b-operator-+=) vec-3b (this :pointer) (rhs vec-3b))

(cffi:defcfun ("_ZNK3osg5Vec3bmiERKS0_" vec-3b-operator-) vec-3b (this :pointer) (rhs vec-3b))

(cffi:defcfun ("_ZN3osg5Vec3bmIERKS0_" vec-3b-operator-=) vec-3b (this :pointer) (rhs vec-3b))

(cffi::defctype value-type :double)

(cffi:defcenum .-11
  (:num-components 3))

(cffi:defcfun ("_ZN3osg5Vec3daSERKS0_" vec-3d-operator-=) vec-3d (this :pointer) (arg1 vec-3d))

(cffi:defcfun ("_ZN3osg5Vec3dC1ERKS0_" vec-3d-constructor) :void (this :pointer) (arg1 vec-3d))

(cl:defun vec-3d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3d)))
    (vec-3d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3dC1Ev" vec-3d-constructor) :void (this :pointer))

(cl:defun vec-3d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3d)))
    (vec-3d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3dC1ERKNS_5Vec3fE" vec-3d-constructor) :void (this :pointer) (vec vec-3f))

(cl:defun vec-3d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3d)))
    (vec-3d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3dC1Eddd" vec-3d-constructor) :void (this :pointer) (x :double)
                                                               (y :double) (z :double))

(cl:defun vec-3d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3d)))
    (vec-3d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3dC1ERKNS_5Vec2dEd" vec-3d-constructor) :void (this :pointer)
                                                                         (v-2 vec-2d) (zz :double))

(cl:defun vec-3d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3d)))
    (vec-3d-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec3deqERKS0_" vec-3d-operator-==) :char (this :pointer) (v vec-3d))

(cffi:defcfun ("_ZNK3osg5Vec3dneERKS0_" vec-3d-operator-!=) :char (this :pointer) (v vec-3d))

(cffi:defcfun ("_ZN3osg5Vec3d3ptrEv" ptr) (:pointer :double) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3d3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3d3setEddd" set) :void (this :pointer) (x :double) (y :double)
                                                  (z :double))

(cffi:defcfun ("_ZN3osg5Vec3d3setERKS0_" set) :void (this :pointer) (rhs vec-3d))

(cffi:defcfun ("_ZN3osg5Vec3dixEi" vec-3d-operator-[]) :double (this :pointer) (i :int))

(cffi:defcfun ("_ZNK3osg5Vec3dixEi" vec-3d-operator-[]) :double (this :pointer) (i :int))

(cffi:defcfun ("_ZN3osg5Vec3d1xEv" x) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3d1yEv" y) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3d1zEv" z) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3d1xEv" x) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3d1yEv" y) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3d1zEv" z) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3d5validEv" valid) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3d5isNaNEv" is-na-n) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3dmlERKS0_" vec-3d-operator-*) :double (this :pointer) (rhs vec-3d))

(cffi:defcfun ("_ZNK3osg5Vec3deoERKS0_" vec-3d-operator-^) vec-3d (this :pointer) (rhs vec-3d))

(cffi:defcfun ("_ZNK3osg5Vec3dmlEd" vec-3d-operator-*) vec-3d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZN3osg5Vec3dmLEd" vec-3d-operator-*=) vec-3d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZNK3osg5Vec3ddvEd" vec-3d-operator-/) vec-3d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZN3osg5Vec3ddVEd" vec-3d-operator-/=) vec-3d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZNK3osg5Vec3dplERKS0_" vec-3d-operator-+) vec-3d (this :pointer) (rhs vec-3d))

(cffi:defcfun ("_ZN3osg5Vec3dpLERKS0_" vec-3d-operator-+=) vec-3d (this :pointer) (rhs vec-3d))

(cffi:defcfun ("_ZNK3osg5Vec3dmiERKS0_" vec-3d-operator-) vec-3d (this :pointer) (rhs vec-3d))

(cffi:defcfun ("_ZN3osg5Vec3dmIERKS0_" vec-3d-operator-=) vec-3d (this :pointer) (rhs vec-3d))

(cffi:defcfun ("_ZNK3osg5Vec3dngEv" vec-3d-operator-) vec-3d (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3d6lengthEv" length) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3d7length2Ev" length-2) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3d9normalizeEv" normalize) :double (this :pointer))

(cffi::defctype value-type :short)

(cffi:defcenum .-12
  (:num-components 3))

(cffi:defcfun ("_ZN3osg5Vec3saSERKS0_" vec-3s-operator-=) vec-3s (this :pointer) (arg1 vec-3s))

(cffi:defcfun ("_ZN3osg5Vec3sC1ERKS0_" vec-3s-constructor) :void (this :pointer) (arg1 vec-3s))

(cl:defun vec-3s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3s)))
    (vec-3s-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3sC1Ev" vec-3s-constructor) :void (this :pointer))

(cl:defun vec-3s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3s)))
    (vec-3s-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec3sC1Esss" vec-3s-constructor) :void (this :pointer) (r :short) (g :short)
                                                               (b :short))

(cl:defun vec-3s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3s)))
    (vec-3s-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec3seqERKS0_" vec-3s-operator-==) :char (this :pointer) (v vec-3s))

(cffi:defcfun ("_ZNK3osg5Vec3sneERKS0_" vec-3s-operator-!=) :char (this :pointer) (v vec-3s))

(cffi:defcfun ("_ZN3osg5Vec3s3ptrEv" ptr) (:pointer :short) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3s3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3s3setEsss" set) :void (this :pointer) (r :short) (g :short) (b :short))

(cffi:defcfun ("_ZN3osg5Vec3s3setERKS0_" set) :void (this :pointer) (rhs vec-3s))

(cffi:defcfun ("_ZN3osg5Vec3sixEj" vec-3s-operator-[]) :short (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Vec3sixEj" vec-3s-operator-[]) :short (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZN3osg5Vec3s1xEv" x) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3s1yEv" y) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3s1zEv" z) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3s1xEv" x) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3s1yEv" y) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3s1zEv" z) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3s1rEv" r) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3s1gEv" g) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec3s1bEv" b) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3s1rEv" r) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3s1gEv" g) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3s1bEv" b) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec3smlEs" vec-3s-operator-*) vec-3s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZN3osg5Vec3smLEs" vec-3s-operator-*=) vec-3s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZNK3osg5Vec3sdvEs" vec-3s-operator-/) vec-3s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZN3osg5Vec3sdVEs" vec-3s-operator-/=) vec-3s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZNK3osg5Vec3smlERKS0_" vec-3s-operator-*) vec-3s (this :pointer) (rhs vec-3s))

(cffi:defcfun ("_ZN3osg5Vec3smLERKS0_" vec-3s-operator-*=) vec-3s (this :pointer) (rhs vec-3s))

(cffi:defcfun ("_ZNK3osg5Vec3splERKS0_" vec-3s-operator-+) vec-3s (this :pointer) (rhs vec-3s))

(cffi:defcfun ("_ZN3osg5Vec3spLERKS0_" vec-3s-operator-+=) vec-3s (this :pointer) (rhs vec-3s))

(cffi:defcfun ("_ZNK3osg5Vec3smiERKS0_" vec-3s-operator-) vec-3s (this :pointer) (rhs vec-3s))

(cffi:defcfun ("_ZN3osg5Vec3smIERKS0_" vec-3s-operator-=) vec-3s (this :pointer) (rhs vec-3s))

(cffi:defcfun ("_ZNK3osg5Vec3sngEv" vec-3s-operator-) vec-3s (this :pointer))

(cffi::defctype value-type :char)

(cffi:defcenum .-14
  (:num-components 4))

(cffi:defcfun ("_ZN3osg5Vec4baSERKS0_" vec-4b-operator-=) vec-4b (this :pointer) (arg1 vec-4b))

(cffi:defcfun ("_ZN3osg5Vec4bC1ERKS0_" vec-4b-constructor) :void (this :pointer) (arg1 vec-4b))

(cl:defun vec-4b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4b)))
    (vec-4b-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4bC1Ev" vec-4b-constructor) :void (this :pointer))

(cl:defun vec-4b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4b)))
    (vec-4b-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4bC1Eaaaa" vec-4b-constructor) :void (this :pointer) (x :char) (y :char)
                                                                (z :char) (w :char))

(cl:defun vec-4b-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4b)))
    (vec-4b-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec4beqERKS0_" vec-4b-operator-==) :char (this :pointer) (v vec-4b))

(cffi:defcfun ("_ZNK3osg5Vec4bneERKS0_" vec-4b-operator-!=) :char (this :pointer) (v vec-4b))

(cffi:defcfun ("_ZN3osg5Vec4b3ptrEv" ptr) (:pointer :char) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4b3setEaaaa" set) :void (this :pointer) (x :char) (y :char) (z :char)
                                                   (w :char))

(cffi:defcfun ("_ZN3osg5Vec4bixEj" vec-4b-operator-[]) :char (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Vec4bixEj" vec-4b-operator-[]) :char (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZN3osg5Vec4b1xEv" x) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4b1yEv" y) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4b1zEv" z) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4b1wEv" w) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b1xEv" x) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b1yEv" y) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b1zEv" z) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b1wEv" w) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4b1rEv" r) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4b1gEv" g) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4b1bEv" b) :char (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4b1aEv" a) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b1rEv" r) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b1gEv" g) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b1bEv" b) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4b1aEv" a) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4bmlEf" vec-4b-operator-*) vec-4b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec4bmLEf" vec-4b-operator-*=) vec-4b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec4bdvEf" vec-4b-operator-/) vec-4b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZN3osg5Vec4bdVEf" vec-4b-operator-/=) vec-4b (this :pointer) (rhs :float))

(cffi:defcfun ("_ZNK3osg5Vec4bplERKS0_" vec-4b-operator-+) vec-4b (this :pointer) (rhs vec-4b))

(cffi:defcfun ("_ZN3osg5Vec4bpLERKS0_" vec-4b-operator-+=) vec-4b (this :pointer) (rhs vec-4b))

(cffi:defcfun ("_ZNK3osg5Vec4bmiERKS0_" vec-4b-operator-) vec-4b (this :pointer) (rhs vec-4b))

(cffi:defcfun ("_ZN3osg5Vec4bmIERKS0_" vec-4b-operator-=) vec-4b (this :pointer) (rhs vec-4b))

(cffi::defctype value-type :double)

(cffi:defcenum .-15
  (:num-components 4))

(cffi:defcfun ("_ZN3osg5Vec4daSERKS0_" vec-4d-operator-=) vec-4d (this :pointer) (arg1 vec-4d))

(cffi:defcfun ("_ZN3osg5Vec4dC1ERKS0_" vec-4d-constructor) :void (this :pointer) (arg1 vec-4d))

(cl:defun vec-4d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4d)))
    (vec-4d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4dC1Ev" vec-4d-constructor) :void (this :pointer))

(cl:defun vec-4d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4d)))
    (vec-4d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4dC1Edddd" vec-4d-constructor) :void (this :pointer) (x :double)
                                                                (y :double) (z :double) (w :double))

(cl:defun vec-4d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4d)))
    (vec-4d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4dC1ERKNS_5Vec3dEd" vec-4d-constructor) :void (this :pointer)
                                                                         (v-3 vec-3d) (w :double))

(cl:defun vec-4d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4d)))
    (vec-4d-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4dC1ERKNS_5Vec4fE" vec-4d-constructor) :void (this :pointer) (vec vec-4f))

(cl:defun vec-4d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4d)))
    (vec-4d-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec4deqERKS0_" vec-4d-operator-==) :char (this :pointer) (v vec-4d))

(cffi:defcfun ("_ZNK3osg5Vec4dneERKS0_" vec-4d-operator-!=) :char (this :pointer) (v vec-4d))

(cffi:defcfun ("_ZN3osg5Vec4d3ptrEv" ptr) (:pointer :double) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d3setEdddd" set) :void (this :pointer) (x :double) (y :double)
                                                   (z :double) (w :double))

(cffi:defcfun ("_ZN3osg5Vec4dixEj" vec-4d-operator-[]) :double (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Vec4dixEj" vec-4d-operator-[]) :double (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZN3osg5Vec4d1xEv" x) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d1yEv" y) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d1zEv" z) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d1wEv" w) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d1xEv" x) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d1yEv" y) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d1zEv" z) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d1wEv" w) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d1rEv" r) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d1gEv" g) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d1bEv" b) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d1aEv" a) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d1rEv" r) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d1gEv" g) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d1bEv" b) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d1aEv" a) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d6asABGREv" as-abgr) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d6asRGBAEv" as-rgba) :unsigned-int (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d5validEv" valid) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d5isNaNEv" is-na-n) :char (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4dmlERKS0_" vec-4d-operator-*) :double (this :pointer) (rhs vec-4d))

(cffi:defcfun ("_ZNK3osg5Vec4dmlEd" vec-4d-operator-*) vec-4d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZN3osg5Vec4dmLEd" vec-4d-operator-*=) vec-4d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZNK3osg5Vec4ddvEd" vec-4d-operator-/) vec-4d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZN3osg5Vec4ddVEd" vec-4d-operator-/=) vec-4d (this :pointer) (rhs :double))

(cffi:defcfun ("_ZNK3osg5Vec4dplERKS0_" vec-4d-operator-+) vec-4d (this :pointer) (rhs vec-4d))

(cffi:defcfun ("_ZN3osg5Vec4dpLERKS0_" vec-4d-operator-+=) vec-4d (this :pointer) (rhs vec-4d))

(cffi:defcfun ("_ZNK3osg5Vec4dmiERKS0_" vec-4d-operator-) vec-4d (this :pointer) (rhs vec-4d))

(cffi:defcfun ("_ZN3osg5Vec4dmIERKS0_" vec-4d-operator-=) vec-4d (this :pointer) (rhs vec-4d))

(cffi:defcfun ("_ZNK3osg5Vec4dngEv" vec-4d-operator-) vec-4d (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d6lengthEv" length) :double (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4d7length2Ev" length-2) :double (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4d9normalizeEv" normalize) :double (this :pointer))

(cffi::defctype value-type :short)

(cffi:defcenum .-16
  (:num-components 4))

(cffi:defcfun ("_ZN3osg5Vec4saSERKS0_" vec-4s-operator-=) vec-4s (this :pointer) (arg1 vec-4s))

(cffi:defcfun ("_ZN3osg5Vec4sC1ERKS0_" vec-4s-constructor) :void (this :pointer) (arg1 vec-4s))

(cl:defun vec-4s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4s)))
    (vec-4s-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4sC1Ev" vec-4s-constructor) :void (this :pointer))

(cl:defun vec-4s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4s)))
    (vec-4s-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg5Vec4sC1Essss" vec-4s-constructor) :void (this :pointer) (x :short)
                                                                (y :short) (z :short) (w :short))

(cl:defun vec-4s-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-4s)))
    (vec-4s-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg5Vec4seqERKS0_" vec-4s-operator-==) :char (this :pointer) (v vec-4s))

(cffi:defcfun ("_ZNK3osg5Vec4sneERKS0_" vec-4s-operator-!=) :char (this :pointer) (v vec-4s))

(cffi:defcfun ("_ZN3osg5Vec4s3ptrEv" ptr) (:pointer :short) (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s3ptrEv" ptr) :pointer (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4s3setEssss" set) :void (this :pointer) (x :short) (y :short) (z :short)
                                                   (w :short))

(cffi:defcfun ("_ZN3osg5Vec4sixEj" vec-4s-operator-[]) :short (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZNK3osg5Vec4sixEj" vec-4s-operator-[]) :short (this :pointer) (i :unsigned-int))

(cffi:defcfun ("_ZN3osg5Vec4s1xEv" x) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4s1yEv" y) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4s1zEv" z) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4s1wEv" w) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s1xEv" x) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s1yEv" y) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s1zEv" z) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s1wEv" w) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4s1rEv" r) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4s1gEv" g) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4s1bEv" b) :short (this :pointer))

(cffi:defcfun ("_ZN3osg5Vec4s1aEv" a) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s1rEv" r) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s1gEv" g) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s1bEv" b) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4s1aEv" a) :short (this :pointer))

(cffi:defcfun ("_ZNK3osg5Vec4smlEs" vec-4s-operator-*) vec-4s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZN3osg5Vec4smLEs" vec-4s-operator-*=) vec-4s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZNK3osg5Vec4sdvEs" vec-4s-operator-/) vec-4s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZN3osg5Vec4sdVEs" vec-4s-operator-/=) vec-4s (this :pointer) (rhs :short))

(cffi:defcfun ("_ZNK3osg5Vec4smlERKS0_" vec-4s-operator-*) vec-4s (this :pointer) (rhs vec-4s))

(cffi:defcfun ("_ZN3osg5Vec4smLERKS0_" vec-4s-operator-*=) vec-4s (this :pointer) (rhs vec-4s))

(cffi:defcfun ("_ZNK3osg5Vec4splERKS0_" vec-4s-operator-+) vec-4s (this :pointer) (rhs vec-4s))

(cffi:defcfun ("_ZN3osg5Vec4spLERKS0_" vec-4s-operator-+=) vec-4s (this :pointer) (rhs vec-4s))

(cffi:defcfun ("_ZNK3osg5Vec4smiERKS0_" vec-4s-operator-) vec-4s (this :pointer) (rhs vec-4s))

(cffi:defcfun ("_ZN3osg5Vec4smIERKS0_" vec-4s-operator-=) vec-4s (this :pointer) (rhs vec-4s))

(cffi:defcfun ("_ZNK3osg5Vec4sngEv" vec-4s-operator-) vec-4s (this :pointer))

(cffi:defcfun ("_ZN3osg8Geometry9ArrayDataC1Ev" array-data-constructor) :void (this :pointer))

(cl:defun array-data-new ()
  (cl:let ((instance (cffi:foreign-alloc 'array-data)))
    (array-data-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg8Geometry9ArrayDataC1ERKS1_RKNS_6CopyOpE" array-data-constructor) :void (this :pointer)
                                                                                               (data array-data)
                                                                                               (copyop copy-op))

(cl:defun array-data-new ()
  (cl:let ((instance (cffi:foreign-alloc 'array-data)))
    (array-data-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg8Geometry9ArrayDataC1EPNS_5ArrayENS0_16AttributeBindingEh" array-data-constructor) :void (this :pointer)
                                                                                                                (a :pointer)
                                                                                                                (b attribute-binding)
                                                                                                                (n g-lboolean))

(cl:defun array-data-new ()
  (cl:let ((instance (cffi:foreign-alloc 'array-data)))
    (array-data-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg8Geometry9ArrayDataC1EPNS_5ArrayEPNS_10IndexArrayENS0_16AttributeBindingEh" array-data-constructor) :void (this :pointer)
                                                                                                                                 (a :pointer)
                                                                                                                                 (i :pointer)
                                                                                                                                 (b attribute-binding)
                                                                                                                                 (n g-lboolean))

(cl:defun array-data-new ()
  (cl:let ((instance (cffi:foreign-alloc 'array-data)))
    (array-data-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg8Geometry9ArrayDataaSERKS1_" array-data-operator-=) array-data (this :pointer)
                                                                                      (rhs array-data))

(cffi:defcfun ("_ZNK3osg8Geometry9ArrayData5emptyEv" empty) :char (this :pointer))

(cffi:defcfun ("_ZN3osg9Texture2D15SubloadCallbackaSERKS1_" subload-callback-operator-=) subload-callback (this :pointer)
                                                                                                          (arg1 subload-callback))

(cffi:defcfun ("_ZN3osg9Texture2D15SubloadCallbackC1ERKS1_" subload-callback-constructor) :void (this :pointer)
                                                                                                (arg1 subload-callback))

(cl:defun subload-callback-new ()
  (cl:let ((instance (cffi:foreign-alloc 'subload-callback)))
    (subload-callback-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg9Texture2D15SubloadCallbackC1Ev" subload-callback-constructor) :void (this :pointer))

(cl:defun subload-callback-new ()
  (cl:let ((instance (cffi:foreign-alloc 'subload-callback)))
    (subload-callback-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg9Texture2D15SubloadCallback4loadERKS0_RNS_5StateE" load) :void (this :pointer)
                                                                                       (texture texture-2d)
                                                                                       (state state))

(cffi:defcfun ("_ZNK3osg9Texture2D15SubloadCallback7subloadERKS0_RNS_5StateE" subload) :void (this :pointer)
                                                                                             (texture texture-2d)
                                                                                             (state state))

(cffi:defcfun ("_ZN3osg4Node29ComputeBoundingSphereCallbackC1ERKS1_" compute-bounding-sphere-callback-constructor) :void (this :pointer)
                                                                                                                         (arg1 compute-bounding-sphere-callback))

(cl:defun compute-bounding-sphere-callback-new ()
  (cl:let ((instance (cffi:foreign-alloc 'compute-bounding-sphere-callback)))
    (compute-bounding-sphere-callback-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg4Node29ComputeBoundingSphereCallbackC1Ev" compute-bounding-sphere-callback-constructor) :void (this :pointer))

(cl:defun compute-bounding-sphere-callback-new ()
  (cl:let ((instance (cffi:foreign-alloc 'compute-bounding-sphere-callback)))
    (compute-bounding-sphere-callback-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg4Node29ComputeBoundingSphereCallbackC1ERKS1_RKNS_6CopyOpE" compute-bounding-sphere-callback-constructor) :void (this :pointer)
                                                                                                                                      (arg1 compute-bounding-sphere-callback)
                                                                                                                                      (arg2 copy-op))

(cl:defun compute-bounding-sphere-callback-new ()
  (cl:let ((instance (cffi:foreign-alloc 'compute-bounding-sphere-callback)))
    (compute-bounding-sphere-callback-constructor instance)
    instance))

(cffi:defcfun ("_ZNK3osg4Node29ComputeBoundingSphereCallback9cloneTypeEv" clone-type) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node29ComputeBoundingSphereCallback5cloneERKNS_6CopyOpE" clone) :pointer (this :pointer)
                                                                                                  (copyop copy-op))

(cffi:defcfun ("_ZNK3osg4Node29ComputeBoundingSphereCallback12isSameKindAsEPKNS_6ObjectE" is-same-kind-as) :char (this :pointer)
                                                                                                                 (obj :pointer))

(cffi:defcfun ("_ZNK3osg4Node29ComputeBoundingSphereCallback11libraryNameEv" library-name) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node29ComputeBoundingSphereCallback9classNameEv" class-name) :pointer (this :pointer))

(cffi:defcfun ("_ZNK3osg4Node29ComputeBoundingSphereCallback12computeBoundERKS0_" compute-bound) bounding-sphere (this :pointer)
                                                                                                                 (arg1 node))

(cffi:defcfun ("_ZN3osg8Geometry13Vec3ArrayDataC1Ev" vec-3-array-data-constructor) :void (this :pointer))

(cl:defun vec-3-array-data-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3-array-data)))
    (vec-3-array-data-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg8Geometry13Vec3ArrayDataC1ERKS1_RKNS_6CopyOpE" vec-3-array-data-constructor) :void (this :pointer)
                                                                                                          (data vec-3-array-data)
                                                                                                          (copyop copy-op))

(cl:defun vec-3-array-data-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3-array-data)))
    (vec-3-array-data-constructor instance)
    instance))

(cffi::defctype vec-3-array template-array-<osg-::-vec-3f-,-vec-3-array-type-,3,5126>)

(cffi:defcfun ("_ZN3osg8Geometry13Vec3ArrayDataC1EPNS_13TemplateArrayINS_5Vec3fELNS_5Array4TypeE10ELi3ELi5126EEENS0_16AttributeBindingEh" vec-3-array-data-constructor) :void (this :pointer)
                                                                                                                                                                              (a :pointer)
                                                                                                                                                                              (b attribute-binding)
                                                                                                                                                                              (n g-lboolean))

(cl:defun vec-3-array-data-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3-array-data)))
    (vec-3-array-data-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg8Geometry13Vec3ArrayDataC1EPNS_13TemplateArrayINS_5Vec3fELNS_5Array4TypeE10ELi3ELi5126EEEPNS_10IndexArrayENS0_16AttributeBindingEh" vec-3-array-data-constructor) :void (this :pointer)
                                                                                                                                                                                               (a :pointer)
                                                                                                                                                                                               (i :pointer)
                                                                                                                                                                                               (b attribute-binding)
                                                                                                                                                                                               (n g-lboolean))

(cl:defun vec-3-array-data-new ()
  (cl:let ((instance (cffi:foreign-alloc 'vec-3-array-data)))
    (vec-3-array-data-constructor instance)
    instance))

(cffi:defcfun ("_ZN3osg8Geometry13Vec3ArrayDataaSERKS1_" vec-3-array-data-operator-=) vec-3-array-data (this :pointer)
                                                                                                       (rhs vec-3-array-data))

(cffi:defcfun ("_ZNK3osg8Geometry13Vec3ArrayData5emptyEv" empty) :char (this :pointer))
